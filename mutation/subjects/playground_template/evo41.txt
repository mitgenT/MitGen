from wrapt_timeout_decorator import *

<generated_code_here>

import numpy as np
from numpy import nan, inf # for some outputs.
import sys

sys.set_int_max_str_digits(0)

from enum import IntEnum, auto

def is_floats(x) -> bool:
    # check if it is float; List[float]; Tuple[float]
    # TODO: search for any close floats? (other data structures)
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False


class DataType(IntEnum):
    Float = auto()
    Bool = auto()
    Int = auto()
    Str = auto()
    Null = auto()
    Tuple = auto()
    List = auto()
    Dict = auto()
    Set = auto()
    Type = auto()
    Unknown = auto()


def get_type(x):
    if x is None:
        return DataType.Null
    elif isinstance(x, bool):
        return DataType.Bool
    elif isinstance(x, int):
        return DataType.Int
    elif isinstance(x, str):
        return DataType.Str
    elif is_floats(x):
        return DataType.Float
    elif isinstance(x, tuple):
        return DataType.Tuple
    elif isinstance(x, list):
        return DataType.List
    elif isinstance(x, dict):
        return DataType.Dict
    elif isinstance(x, set):
        return DataType.Set
    elif isinstance(x, type):
        return DataType.Type
    else:
        return DataType.Unknown


def is_equal(x, y) -> tuple[bool, str]:
    x_type, y_type = get_type(x), get_type(y)
    if x_type != y_type:
        return False, "Type mismatch: {} vs {}".format(str(x_type), str(y_type))

    if x_type in [DataType.Int, DataType.Bool, DataType.Null, DataType.Str, DataType.Set, DataType.Type]:
        if x == y:
            return True, None
        try:
            error_msg = "INT/BOOL/NULL/ Value mismatch: {} vs {}".format(repr(x)[:300], repr(y)[:300])
        except:
            error_msg = "Value mismatch: too large for display"
        return False, error_msg
    elif x_type == DataType.Float:
        if np.allclose(x, y, equal_nan=True, atol=1e-6): # guard against nan
            return True, None
        else:
            return False, "FLOAT Value mismatch: {} vs {}".format(x, y)
    elif x_type in [DataType.List, DataType.Tuple]:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for i in range(len(x)):
            equal, msg = is_equal(x[i], y[i])
            if not equal:
                return False, msg
        return True, None
    elif x_type == DataType.Dict:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for k, v in x.items():
            if k not in y:
                return False, "DICT Value mismatch: key {} in {} but not in {}".format(k, x, y)
            equal, msg = is_equal(v, y[k])
            if not equal:
                return False, msg
        return True, None
    else:
        try:
            if x == y:  # e.g., object comparison
                return True, None
            else:
                return False, "ELSE Value mismatch: {} vs {}".format(x, y)
        except:
            return False, "Unsupported type: {} <-- {}".format(x_type, type(x))

def check(candidate):
    inputs = [eval(f"[{i}]") for i in ['2, [1000, 0]', '0, []', '1, [0]', '3, [0, 0, 0]', '3, [1, 0, 1]', '5, [1000, 2000, 3000, 4000, 5000]', '5, [5000, 4000, 3000, 2000, 1000]', '10, [i for i in range(10)]', '10, [i for i in range(10, 0, -1)]', '10, [1000 for _ in range(10)]', '5, [1000, 2000, 500, 1500, 800]', '6, [600, 800, 1000, 1200, 1400, 1700]', '4, [0, 0, 0, 0]', '7, [800, 1000, 1200, 300, 400, 500, 900]', '8, [2000, 1800, 1600, 1400, 1200, 1000, 800, 600]', '10, [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]', '3, [1500, 2500, 3500]', '5, [500, 1000, 1500, 2000, 2500]', '5, [500, 1000, 1500, 2000, 2500]', '6, [0, 0, 0, 0, 0, 0]', '8, [100, 200, 300, 400, 500, 600, 700, 800]', '3, [1000000, 2000000, 3000000]', '4, [999, 888, 777, 666]', '10, [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]', '7, [700, 100, 500, 300, 900, 400, 200]', '1, [1000000000]', '5, [0, 1000, 2000, 3000, 4000]', '9, [900, 800, 700, 600, 500, 400, 300, 200, 100]']]
    outputs = [3, 0, 0, 0, 8, 25, 25, 99, 100, 100, 25, 36, 0, 49, 64, 100, 9, 25, 25, 0, 64, 9, 16, 100, 49, 1, 24, 81]
    to_output = []
    for i, (inp, exp) in enumerate(zip(inputs, outputs)):
        try:
            to_output.append((i,compute_output(candidate,inp)))
        except:
            to_output.append((i,"Exception"))
    print(f"Final output of subject for prioritization is:::::{to_output}")

@timeout(5)
def compute_output(candidate,inp):
    return candidate(*inp)
    
check(car_race_collision)
