import numpy as np
from numpy import nan, inf # for some outputs.
import sys
from wrapt_timeout_decorator import *

<generated_code_here>

sys.set_int_max_str_digits(0)

from enum import IntEnum, auto

def is_floats(x) -> bool:
    # check if it is float; List[float]; Tuple[float]
    # TODO: search for any close floats? (other data structures)
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False


class DataType(IntEnum):
    Float = auto()
    Bool = auto()
    Int = auto()
    Str = auto()
    Null = auto()
    Tuple = auto()
    List = auto()
    Dict = auto()
    Set = auto()
    Type = auto()
    Unknown = auto()


def get_type(x):
    if x is None:
        return DataType.Null
    elif isinstance(x, bool):
        return DataType.Bool
    elif isinstance(x, int):
        return DataType.Int
    elif isinstance(x, str):
        return DataType.Str
    elif is_floats(x):
        return DataType.Float
    elif isinstance(x, tuple):
        return DataType.Tuple
    elif isinstance(x, list):
        return DataType.List
    elif isinstance(x, dict):
        return DataType.Dict
    elif isinstance(x, set):
        return DataType.Set
    elif isinstance(x, type):
        return DataType.Type
    else:
        return DataType.Unknown


def is_equal(x, y) -> tuple[bool, str]:
    x_type, y_type = get_type(x), get_type(y)
    if x_type != y_type:
        return False, "Type mismatch: {} vs {}".format(str(x_type), str(y_type))

    if x_type in [DataType.Int, DataType.Bool, DataType.Null, DataType.Str, DataType.Set, DataType.Type]:
        if x == y:
            return True, None
        try:
            error_msg = "INT/BOOL/NULL/ Value mismatch: {} vs {}".format(repr(x)[:300], repr(y)[:300])
        except:
            error_msg = "Value mismatch: too large for display"
        return False, error_msg
    elif x_type == DataType.Float:
        if np.allclose(x, y, equal_nan=True, atol=1e-6): # guard against nan
            return True, None
        else:
            return False, "FLOAT Value mismatch: {} vs {}".format(x, y)
    elif x_type in [DataType.List, DataType.Tuple]:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for i in range(len(x)):
            equal, msg = is_equal(x[i], y[i])
            if not equal:
                return False, msg
        return True, None
    elif x_type == DataType.Dict:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for k, v in x.items():
            if k not in y:
                return False, "DICT Value mismatch: key {} in {} but not in {}".format(k, x, y)
            equal, msg = is_equal(v, y[k])
            if not equal:
                return False, msg
        return True, None
    else:
        try:
            if x == y:  # e.g., object comparison
                return True, None
            else:
                return False, "ELSE Value mismatch: {} vs {}".format(x, y)
        except:
            return False, "Unsupported type: {} <-- {}".format(x_type, type(x))

def check(candidate):
    inputs = [eval(f"[{i}]") for i in ['10, 5, "square"', '12, 3, "skip"', '15, 4, "add_two"', '20, 7, "square"', '30, 10, "add_two"', '50, 5, "skip"', '25, 6, "add_two"', '75, 15, "skip"', '0, 0, "square"', '1, 1, "add_two"', '2, 2, "skip"', '3, 3, "square"', '4, 4, "add_two"', '1, 1, "square"', '0, 0, "add_two"', '100, 1, "skip"', '1, 100, "square"', '2, 2, "add_two"', '0, 1, "skip"', '100, 100, "square"', '-1, 1, "add_two"', '1, -1, "skip"', '-1, -1, "square"', '0, 5, "square"', '1, 1, "skip"', '100, 50, "add_two"', '0, 0, "square"', '1, 0, "add_two"', '5, -3, "skip"', '5, 3, "invalid_operation"', '1, 1, ""', '100, 10, "square"', '150, 7, "add_two"', '200, 30, "skip"', '0, 4, "square"', '50, 1, "add_two"', '1, 1, "skip"', '999, 333, "square"', '500, 50, "add_two"', '1000, 100, "skip"', '20, 6, "square"', '25, 8, "add_two"', '30, 10, "skip"', '18, 2, "square"', '22, 7, "add_two"', '28, 1, "skip"', '33, 11, "square"', '35, 5, "add_two"', '40, 3, "skip"']]
    outputs = [46225, 0, 946, 173495405, 854112, 0, 89353, 0, 0, 3, 0, 4, 5, 1, 0, 0, 1, 3, 0, 125475243067621153271396401396356512255625, 3, 1, 1, 0, 0, 354224848219991937225, 0, 1, 1, 5, 1, 88566998274764173364381941509606545828036745749994346468571624187200614169017728939621479466091851580962075678861908274608136935546355902156257472913515854002026119726608666243606209003425682908283583368273900123182132873772799827511865068452125009936418271096470133400054855772686554465340159272678128256075694321246921900695791272866740412902479932920085361004926362052937862312414655215850425273284465411106208142741170895551261720687632769080485549753673488724448426331349636746333513950981373896125827270998932883036228894595264841717349165095907730284883127499317256775209459202008542415409449672244584963968015188722457145813251466252618772305230935805535234567722413192303064274698373982622358271058752944244964733159221602813707276329907064828613996461407524326911818424317259741633762993848139559949071977326856162599474928372970072375671887037230499385759172702437748805622926364001127725204971225203118790722197267262703118445816779817049863534532440572410172352950420997435718410653968331113713007717063083621259115770103140322299004072636551272414156249337176727465487884285938155228656061248977014141448206155550708739162346662032452260377549523768731195372140663896217877365042418794123885394736762288872467421168779246586074289892110649758054859394867538163215403690738533666729046790833667225300325476826197546087359658192342530280798345396629806834258292850114865259738181342434808966837017449332273688947288787796001197861173752084445870333881169380075367385540584818999042918128669519841931882828186730961263904980971407657176207122867726387197787680280979578255789622482408191444197276098375967042975417174928625927439293968614274086019753175772709026415116817327312309042307445674205960289489613749069874733962666248652088015138850769544645894078980095316383609560582996981476330560357728457453835533470635500368361050530123265951256433636140811554264009379870432428722193051514857869112030627606899273312808833240832041670132541490503023306211494728490182869879809688615788821319317548782949018893254602591617305601892326628486528108357365633548056573682890729170062179244435931548375804886375604791642499304657274803790524473836743230997669048301448007483963889016631805285354598262464354735525953312967834812905554034731238321518982978247618743258565517867963627864910471516614459939497847060534759862945440144318907760661136307455106614704088072311860154454825545538675335369458216952792437063593366467392365192977194748045626559602374139854471696107049669066480796093365332939998394937080086172098706639817453396269108310052070336055451262689485063821668556174740754287852311159787491095812684837702758895700051004779088069145791786874640968574770825192503451753249197609962071808252507374720481698441612815589411344702602708596977305566473204199253459497871668959450060802098809826338129494137558994805628898399167667067283759871965238871223748407289959311087450965170102342196668821528361080036471356125945288607214560940192652897566390160735523536019462086212936900801886135856939992558624870531260920596990546296944994419526344329105439724890876041448885179229505914368731565581955629853701600222316802024775858137846175443828130312482335277582611946001969230694229569680803300912281661812272765311973603418067087734580171980589662253947746519631356803748650770847898050262992646552375666356140112654710982208198929171724969915066820781569657094779540218051583009875878354794902024295943906582563548118675893734996878195761043570795264776394092132747149271756698277523017603306678561239532999112532341059514305661320545705841678531980549290014240574287924825109436293262298601073898027231262908195384687393046147814962350859123487597872000946039961801271542718226031189369441479538964574072508415281130801141304712039093342850777412005967535025, 11119981975749915393814538393176, 125085564095272981278914349544312088565, 0, 78488829221, 0, 45868512521981697833396556596051544594061236840961005971311864134041775606806668050528924795422518322586233851174797686156469356519942381533057072603419609735798648132947979261661879371995497720898996846133849328706586828936571775132923274484419415098951634290164786226846796837840743517499862247232053345165061434487677296524712662649566750714877696009612263016540246522439502412539957197252916712318439643901075305022902300423359993885272480102902867943438243543316607948742818875560817214146602388351280276899429757304784738948472535886973746576256350453112613980561790482382186878314621287340281912209290686349100158026536887923516255115622970525583085402040343379441413795611280640637379365488203257735342975584979608086904224952899365600909588320564217173938976659660947550251786381025164656061942236554104973728215482044062582557354332705361623366831143060754907636535519394021271325622977119652623010898560828615351872541489256494522741062898911555401730181551876, 139423224577729254149013230474078180543731094170816753336506814500310770471438167741769949808256841842375, 0, 195596040379645, 80305, 0, 7007081824346191671255229164464226952214410310312702085996245448822987904323860725434341454580388604352872645804936692177302996367754472425794746016560715417322805367258792417452002496316059746909150739600, 19755, 0, 35705445950061800885636302500, 12186851, 1]
    to_output = []
    for i, (inp, exp) in enumerate(zip(inputs, outputs)):
        try:
            to_output.append((i,compute_output(candidate,inp)))
        except:
            to_output.append((i,"Exception"))
    print(f"Final output of subject for prioritization is:::::{to_output}")

@timeout(5)
def compute_output(candidate,inp):
    return candidate(*inp)
    
check(fib)