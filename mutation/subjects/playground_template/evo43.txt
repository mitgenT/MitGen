from wrapt_timeout_decorator import *

<generated_code_here>

import numpy as np
from numpy import nan, inf # for some outputs.
import sys

sys.set_int_max_str_digits(0)

from enum import IntEnum, auto

def is_floats(x) -> bool:
    # check if it is float; List[float]; Tuple[float]
    # TODO: search for any close floats? (other data structures)
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False


class DataType(IntEnum):
    Float = auto()
    Bool = auto()
    Int = auto()
    Str = auto()
    Null = auto()
    Tuple = auto()
    List = auto()
    Dict = auto()
    Set = auto()
    Type = auto()
    Unknown = auto()


def get_type(x):
    if x is None:
        return DataType.Null
    elif isinstance(x, bool):
        return DataType.Bool
    elif isinstance(x, int):
        return DataType.Int
    elif isinstance(x, str):
        return DataType.Str
    elif is_floats(x):
        return DataType.Float
    elif isinstance(x, tuple):
        return DataType.Tuple
    elif isinstance(x, list):
        return DataType.List
    elif isinstance(x, dict):
        return DataType.Dict
    elif isinstance(x, set):
        return DataType.Set
    elif isinstance(x, type):
        return DataType.Type
    else:
        return DataType.Unknown


def is_equal(x, y) -> tuple[bool, str]:
    x_type, y_type = get_type(x), get_type(y)
    if x_type != y_type:
        return False, "Type mismatch: {} vs {}".format(str(x_type), str(y_type))

    if x_type in [DataType.Int, DataType.Bool, DataType.Null, DataType.Str, DataType.Set, DataType.Type]:
        if x == y:
            return True, None
        try:
            error_msg = "INT/BOOL/NULL/ Value mismatch: {} vs {}".format(repr(x)[:300], repr(y)[:300])
        except:
            error_msg = "Value mismatch: too large for display"
        return False, error_msg
    elif x_type == DataType.Float:
        if np.allclose(x, y, equal_nan=True, atol=1e-6): # guard against nan
            return True, None
        else:
            return False, "FLOAT Value mismatch: {} vs {}".format(x, y)
    elif x_type in [DataType.List, DataType.Tuple]:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for i in range(len(x)):
            equal, msg = is_equal(x[i], y[i])
            if not equal:
                return False, msg
        return True, None
    elif x_type == DataType.Dict:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for k, v in x.items():
            if k not in y:
                return False, "DICT Value mismatch: key {} in {} but not in {}".format(k, x, y)
            equal, msg = is_equal(v, y[k])
            if not equal:
                return False, msg
        return True, None
    else:
        try:
            if x == y:  # e.g., object comparison
                return True, None
            else:
                return False, "ELSE Value mismatch: {} vs {}".format(x, y)
        except:
            return False, "Unsupported type: {} <-- {}".format(x_type, type(x))

def check(candidate):
    inputs = [eval(f"[{i}]") for i in ['[1], 1', '[2, 4, -5, 3, 5, 7], 3', '[1, -1, 2, -2, 3, -3, 4, -4], 4', '[1, 3, -2, -1], 2', '[1, 3, 5, 0], 2', '[1, -1, 2, -2, 3, -3, 4, -4, 5, -5], 5', '[0, 0, 0, 0], 2', '[-1, -2, -3, -4, -5, 11], 6', '[10, -10, 20, -20, 30, -30, 40, -40], 8', '[1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10], 20', '[1, 3, 5, 7, 9, -25], 6', '[1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 11], 21', '[10, -10, 20, -20, 30, -30, 40, -40, 0], 9', '[], 0', '[0, 0, 0, 0, 0, 0, 0, 0], 4', '[100, -50, -50, 25, -25, 0, 0, 0], 5', '[3, 3, 3, -3, -3, -3, 0, 0, 0, 0, 0, 0], 6', '[1, -1, 2, -2, 3, -2, -1], 0', '[1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6], 12', '[1, 2, 3, 4, 5, -15], 6', '[10, 20, -30, 40, -50, 60, -70, 80, -90, 100, -110], 5', '[1, 2, 3, 4, -10], 5', '[100, 200, -300], 3', '[1, 2, 3, -6, 4, -4, 5, -5], 4', '[], 0', '[-1, 1, 0], 3', '[0, 0, 0, 0], 4', '[-1, 1], 1', '[1, -1, 2, -2, 3, -3, 4, -4], 5', '[10, -10, 20, -20], 1', '[1, 2, 3, 4, 5], 0', '[0], 1', '[1, -1, 2, -2, 3, -3, 4], 4', '[-1, -2, -3, -4, -5], 2', '[], 0', '[0, 0, 0, 0, 0], 2', '[-1, -2, -3, -4, -5], 2', '[1, 2, 3, 4, 5], 2', '[1, -1, 1, -1, 1], 5', '[1, -1, -1, -1], 2', '[-1, 2, -3, 4, -5, 6], 3', '[0, 0, 0, 0, 0], 5', '[1, 1, 1, -3], 3', '[-1, -1, -1, 3], 3', '[0, 0, 0, 0, 0], 5', '[1, -1, 2, -2, 3, -3, 4, -4], 0', '[1, -1, 2, -2, 3, -3, 4, -4], 9', '[1, 2, 3, 4, 5], 0', '[1, -1, 2, -2, 3, -3, 4, -4, -5], 5', '[1, -1, 2, -2, 3, -3, 4, -4], 1', '[1, 5, 3, 7, -5, -7, -1, -3], 8', '[0, 0, 0, 0, 0, 0], 4', '[1, 2, 3, 4, 5, 6, -15], 7', '[1, 2, 3, 4, 5, -5, -4, -3, -2, -1], 10', '[10, -10, 20, -20, 30, -30], 6', '[1, 3, 5, -9], 4', '[], 0']]
    outputs = [False, True, True, True, False, True, False, False, True, True, True, False, True, True, False, False, False, True, True, True, True, True, True, True, True, True, False, False, True, False, True, True, True, False, True, False, False, False, False, True, True, False, False, False, False, True, False, True, True, False, True, False, False, True, True, True, True]
    to_output = []
    for i, (inp, exp) in enumerate(zip(inputs, outputs)):
        try:
            to_output.append((i,compute_output(candidate,inp)))
        except:
            to_output.append((i,"Exception"))
    print(f"Final output of subject for prioritization is:::::{to_output}")

@timeout(5)
def compute_output(candidate,inp):
    return candidate(*inp)
    
check(multi_pairs_sum_to_zero)
