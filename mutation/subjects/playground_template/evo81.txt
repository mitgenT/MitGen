from wrapt_timeout_decorator import *

<generated_code_here>

import numpy as np
from numpy import nan, inf # for some outputs.
import sys

sys.set_int_max_str_digits(0)

from enum import IntEnum, auto

def is_floats(x) -> bool:
    # check if it is float; List[float]; Tuple[float]
    # TODO: search for any close floats? (other data structures)
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False


class DataType(IntEnum):
    Float = auto()
    Bool = auto()
    Int = auto()
    Str = auto()
    Null = auto()
    Tuple = auto()
    List = auto()
    Dict = auto()
    Set = auto()
    Type = auto()
    Unknown = auto()


def get_type(x):
    if x is None:
        return DataType.Null
    elif isinstance(x, bool):
        return DataType.Bool
    elif isinstance(x, int):
        return DataType.Int
    elif isinstance(x, str):
        return DataType.Str
    elif is_floats(x):
        return DataType.Float
    elif isinstance(x, tuple):
        return DataType.Tuple
    elif isinstance(x, list):
        return DataType.List
    elif isinstance(x, dict):
        return DataType.Dict
    elif isinstance(x, set):
        return DataType.Set
    elif isinstance(x, type):
        return DataType.Type
    else:
        return DataType.Unknown


def is_equal(x, y) -> tuple[bool, str]:
    x_type, y_type = get_type(x), get_type(y)
    if x_type != y_type:
        return False, "Type mismatch: {} vs {}".format(str(x_type), str(y_type))

    if x_type in [DataType.Int, DataType.Bool, DataType.Null, DataType.Str, DataType.Set, DataType.Type]:
        if x == y:
            return True, None
        try:
            error_msg = "INT/BOOL/NULL/ Value mismatch: {} vs {}".format(repr(x)[:300], repr(y)[:300])
        except:
            error_msg = "Value mismatch: too large for display"
        return False, error_msg
    elif x_type == DataType.Float:
        if np.allclose(x, y, equal_nan=True, atol=1e-6): # guard against nan
            return True, None
        else:
            return False, "FLOAT Value mismatch: {} vs {}".format(x, y)
    elif x_type in [DataType.List, DataType.Tuple]:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for i in range(len(x)):
            equal, msg = is_equal(x[i], y[i])
            if not equal:
                return False, msg
        return True, None
    elif x_type == DataType.Dict:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for k, v in x.items():
            if k not in y:
                return False, "DICT Value mismatch: key {} in {} but not in {}".format(k, x, y)
            equal, msg = is_equal(v, y[k])
            if not equal:
                return False, msg
        return True, None
    else:
        try:
            if x == y:  # e.g., object comparison
                return True, None
            else:
                return False, "ELSE Value mismatch: {} vs {}".format(x, y)
        except:
            return False, "Unsupported type: {} <-- {}".format(x_type, type(x))

def check(candidate):
    inputs = [eval(f"[{i}]") for i in ['[(4.0, 0.8), (3, 1.2), (1.7, 0.9), (2, 1), (3.5, 1.1)]', '[(4.0, 0.5), (2.7, 1.3), (3.3, 0.9), (1.7, 1.1), (3, 1.5), (0, 1), (4.0, 1.2)]', '[(4.0, 1), (3.7, 0.7), (2.3, 1.4), (1.0, 1.5), (1.7, 0.8), (0.7, 1.1), (3.3, 1.2), (0, 1)]', '[(3.3, 1), (0.7, 1.5), (2.7, 1.4), (3.7, 1.5), (1.0, 0.8), (3.0, 1.1), (2.3, 1.2), (0, 1), (4.0, 0.7)]', '[(2.0, 1), (3.7, 0.7), (1.3, 1.4), (0.7, 1.5), (3.3, 0.8), (3.0, 1.1), (0, 1), (4.0, 0.7), (2.7, 1.6)]', '[(1.7, 1), (2.3, 0.7), (1.0, 1.4), (2.7, 1.5), (3.3, 0.8), (0, 1), (3.0, 1.1), (4.0, 0.7)]', '[(3.7, 1.1), (3.3, 1.2), (1.0, 0.7), (3.0, 1.3), (2.7, 0.9), (2.3, 1.0)]', '[(2.0, 0.8), (1.7, 1.2), (1.3, 0.9), (1.0, 1), (0.7, 1.1), (0.0, 1.3)]', '[(3.5, 0.9), (2.9, 1.0), (2.5, 0.8), (2.0, 1.2), (1.5, 0.7), (1.0, 1.1)]', '[(4.0, 0.7), (3.2, 1.1), (2.3, 0.9), (1.6, 1), (0.9, 1.2), (0.1, 1.0)]', '[(3.9, 0.8), (3.1, 1.2), (2.2, 0.9), (1.5, 1), (0.8, 1.1), (0.0, 1.0)]', '[(4.0, 2.0), (2.7, 1.5), (1.8, 1.2), (3.5, 0.6)]', '[(0.0, 0.0), (1.0, 1.0), (2.0, 2.0), (3.0, 0.0), (4.0, 4.0)]', '[(3.6, 1.1), (2.4, 0.9), (1.2, 2.0), (0.8, 1.5), (4.0, 0.5)]', '[(2.5, 1.5), (3.7, 0.7), (1.1, 2.0), (0.0, 1.0), (4.0, 1.0)]', '[(3.6, 1.5), (2.8, 2.0), (1.4, 1.0), (0.7, 1.5), (4.0, 0.5), (3.3, 1.1), (2.1, 1.2), (1.0, 1.5)]', '[(1.0, 0.0), (4.0, 0.0), (2.0, 0.0), (3.0, 0.0), (0.0, 0.0)]', '[(4.0, 1.5), (3.7, 1.5), (3.3, 1.5), (3.0, 1.5), (2.7, 1.5), (2.3, 1.5), (2.0, 1.5), (1.7, 1.5), (1.3, 1.5), (1.0, 1.5), (0.7, 1.5), (0.0, 1.5), (0.0, 0.5)]', '[(4.0, 0), (3.7, 0), (3.3, 0), (3.0, 0), (2.7, 0), (2.3, 0), (2.0, 0), (1.7, 0), (1.3, 0), (1.0, 0), (0.7, 0), (0.0, 0)]', '[(4.0, -0.5), (3.7, -0.5), (3.3, -0.5), (3.0, -0.5), (2.7, -0.5), (2.3, -0.5), (2.0, -0.5), (1.7, -0.5), (1.3, -0.5), (1.0, -0.5), (0.7, -0.5), (0.0, -0.5)]', '[(4.0, 1), (3.7, 1), (3.3, 1), (3.0, 1), (2.7, 1), (2.3, 1), (2.0, 1), (1.7, 1), (1.3, 1), (1.0, 1), (0.7, 1), (0.0, 1)]', '[(4.0, 0), (3.7, 0), (3.3, 0), (3.0, 0), (2.7, 0), (2.3, 0), (2.0, 0), (1.7, 0), (1.3, 0), (1.0, 0), (0.7, 0), (0.0, 0)]', '[(4.0, 1.5), (3, 1.5), (2.7, 1.5), (2, 1.5), (1.3, 1.5), (0.7, 1.5)]', '[(4.0, 0.5), (3, 0.5), (2.7, 0.5), (2, 0.5), (1.3, 0.5), (0.7, 0.5)]', '[(0.0, 1)]', '[(4.0, 0)]', '[(5, 1), (0, 1), (0, 0), (5, 0)]', '[(1.5, 2), (2.5, 2), (3.5, 2), (4.5, 2)]', '[(1.5, 0.5), (2.5, 0.5), (3.5, 0.5), (4.5, 0.5)]']]
    outputs = [['B+', 'A-', 'C-', 'C', 'A'], ['C', 'A-', 'B', 'C', 'A+', 'E', 'A+'], ['A+', 'B-', 'B+', 'C-', 'C-', 'D', 'A', 'E'], ['B+', 'D+', 'A', 'A+', 'D', 'A-', 'B', 'E', 'B'], ['C', 'B-', 'C', 'D+', 'B-', 'A-', 'E', 'B', 'A+'], ['C-', 'C-', 'C-', 'A+', 'B-', 'E', 'A-', 'B'], ['A+', 'A', 'D-', 'A', 'B-', 'C+'], ['C-', 'C+', 'D+', 'D', 'D', 'E'], ['B+', 'B', 'C', 'B-', 'D+', 'D+'], ['B', 'A-', 'C+', 'C-', 'D+', 'D-'], ['B+', 'A', 'C', 'C-', 'D', 'E'], ['A+', 'A+', 'C+', 'C+'], ['E', 'D', 'A+', 'E', 'A+'], ['A', 'C+', 'B-', 'D+', 'C'], ['A', 'B-', 'C+', 'E', 'A+'], ['A+', 'A+', 'C-', 'D+', 'C', 'A-', 'B-', 'C-'], ['E', 'E', 'E', 'E', 'E'], ['A+', 'A+', 'A+', 'A+', 'A+', 'A-', 'B', 'B-', 'C', 'C-', 'D+', 'E', 'E'], ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'], ['A+', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'], ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'], ['A+', 'A+', 'A+', 'B', 'C', 'D+'], ['C', 'C-', 'C-', 'D', 'D-', 'D-'], ['E'], ['E'], ['A+', 'E', 'E', 'E'], ['B', 'A+', 'A+', 'A+'], ['D', 'D+', 'C', 'C+']]
    to_output = []
    for i, (inp, exp) in enumerate(zip(inputs, outputs)):
        try:
            to_output.append((i,compute_output(candidate,inp)))
        except:
            to_output.append((i,"Exception"))
    print(f"Final output of subject for prioritization is:::::{to_output}")

@timeout(5)
def compute_output(candidate,inp):
    return candidate(*inp)
    
check(numerical_letter_grade_with_weightage)
