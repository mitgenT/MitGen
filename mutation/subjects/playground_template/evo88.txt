from wrapt_timeout_decorator import *

<generated_code_here>

import numpy as np
from numpy import nan, inf # for some outputs.
import sys

sys.set_int_max_str_digits(0)

from enum import IntEnum, auto

def is_floats(x) -> bool:
    # check if it is float; List[float]; Tuple[float]
    # TODO: search for any close floats? (other data structures)
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False


class DataType(IntEnum):
    Float = auto()
    Bool = auto()
    Int = auto()
    Str = auto()
    Null = auto()
    Tuple = auto()
    List = auto()
    Dict = auto()
    Set = auto()
    Type = auto()
    Unknown = auto()


def get_type(x):
    if x is None:
        return DataType.Null
    elif isinstance(x, bool):
        return DataType.Bool
    elif isinstance(x, int):
        return DataType.Int
    elif isinstance(x, str):
        return DataType.Str
    elif is_floats(x):
        return DataType.Float
    elif isinstance(x, tuple):
        return DataType.Tuple
    elif isinstance(x, list):
        return DataType.List
    elif isinstance(x, dict):
        return DataType.Dict
    elif isinstance(x, set):
        return DataType.Set
    elif isinstance(x, type):
        return DataType.Type
    else:
        return DataType.Unknown


def is_equal(x, y) -> tuple[bool, str]:
    x_type, y_type = get_type(x), get_type(y)
    if x_type != y_type:
        return False, "Type mismatch: {} vs {}".format(str(x_type), str(y_type))

    if x_type in [DataType.Int, DataType.Bool, DataType.Null, DataType.Str, DataType.Set, DataType.Type]:
        if x == y:
            return True, None
        try:
            error_msg = "INT/BOOL/NULL/ Value mismatch: {} vs {}".format(repr(x)[:300], repr(y)[:300])
        except:
            error_msg = "Value mismatch: too large for display"
        return False, error_msg
    elif x_type == DataType.Float:
        if np.allclose(x, y, equal_nan=True, atol=1e-6): # guard against nan
            return True, None
        else:
            return False, "FLOAT Value mismatch: {} vs {}".format(x, y)
    elif x_type in [DataType.List, DataType.Tuple]:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for i in range(len(x)):
            equal, msg = is_equal(x[i], y[i])
            if not equal:
                return False, msg
        return True, None
    elif x_type == DataType.Dict:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for k, v in x.items():
            if k not in y:
                return False, "DICT Value mismatch: key {} in {} but not in {}".format(k, x, y)
            equal, msg = is_equal(v, y[k])
            if not equal:
                return False, msg
        return True, None
    else:
        try:
            if x == y:  # e.g., object comparison
                return True, None
            else:
                return False, "ELSE Value mismatch: {} vs {}".format(x, y)
        except:
            return False, "Unsupported type: {} <-- {}".format(x_type, type(x))

def check(candidate):
    inputs = [eval(f"[{i}]") for i in ['[], 0', '[5], 0', '[2, 4, 3, 0, 1, 5], 2', '[2, 4, 3, 0, 1, 5, 6], 3', '[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 5', '[20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0], 10', '[9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 4', '[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], 5', '[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 9', '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 7', '[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], 7', '[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 0', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 14', '[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5', '[44, 3, 99, 0, 64, 2, 12, 1, 45, 66], 3', '[5, 2, 8, 0, 1, 6, 9, 3, 7, 4, 11, 13, 15, 12, 14], 6', '[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 9', '[6, 13, 0, 8, 11, 5, 10, 3, 9, 12, 4, 7, 1, 15, 2, 14], 4', '[33, 55, 77, 99, 22, 44, 66, 88, 111, 123, 135, 147, 159, 171], 7', '[101, 202, 303, 404, 505, 606, 707, 808, 909, 1001], 2', '[9, 7, 5, 3, 1, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 10', '[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5', '[100, 90, 80, 70, 60, 50, 40, 30, 20, 10], 0', '[1, 3, 5, 7, 9, 2, 4, 6, 8, 10], 4', '[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 9', '[50, 40, 70, 20, 90, 10, 30, 60, 80, 100], 2', '[10, 100, 20, 90, 30, 80, 40, 70, 50, 60], 7', '[10, 20, 30, 40, 50, 60, 70, 80, 90], 4', '[1, 3, 5, 2, 4, 6, 7, 8, 9], 0', '[9, 8, 7, 6, 5, 4, 3, 2, 1], 8', '[50, 40, 30, 20, 10, 0], 5', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9', '[100, 200, 300, 400, 500], 2', '[22, 33, 44, 55, 66, 77, 88, 99], 3', '[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], 5', '[11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 1', '[100, 90, 80, 70, 60, 50, 40, 30, 20, 10], 0']]
    outputs = [[], [5], [0, 1, 2, 3, 5, 4], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 10, 9, 8, 7, 6], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [0, 1, 2, 3, 4, 5, 9, 8, 7, 6], [9, 7, 5, 3, 1, 11, 13, 15, 17, 19, 21], [90, 80, 70, 60, 50, 40, 30, 20, 10, 100], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [14, 12, 10, 8, 6, 4, 2, 16, 18, 20, 22, 24, 26, 28, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15], [50, 40, 30, 20, 10, 60, 70, 80, 90, 100], [0, 1, 2, 3, 12, 44, 45, 64, 66, 99], [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 11, 12, 13, 14, 15], [900, 800, 700, 600, 500, 400, 300, 200, 100, 1000], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 14, 13, 12], [22, 33, 44, 55, 66, 77, 88, 171, 159, 147, 135, 123, 111, 99], [202, 101, 303, 404, 505, 606, 707, 808, 909, 1001], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 18, 16, 14, 12], [50, 40, 30, 20, 10, 60, 70, 80, 90, 100], [90, 80, 70, 60, 50, 40, 30, 20, 10, 100], [8, 7, 6, 5, 4, 3, 2, 1, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [60, 50, 40, 30, 20, 10, 70, 80, 90, 100], [60, 50, 40, 30, 20, 10, 70, 80, 90, 100], [40, 30, 20, 10, 50, 60, 70, 80, 90], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 10, 20, 30, 40, 50], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [200, 100, 300, 400, 500], [22, 33, 44, 55, 99, 88, 77, 66], [5, 10, 15, 20, 25, 30, 50, 45, 40, 35], [11, 12, 20, 19, 18, 17, 16, 15, 14, 13], [90, 80, 70, 60, 50, 40, 30, 20, 10, 100]]
    to_output = []
    for i, (inp, exp) in enumerate(zip(inputs, outputs)):
        try:
            to_output.append((i,compute_output(candidate,inp)))
        except:
            to_output.append((i,"Exception"))
    print(f"Final output of subject for prioritization is:::::{to_output}")

@timeout(5)
def compute_output(candidate,inp):
    return candidate(*inp)
    
check(sort_array)
