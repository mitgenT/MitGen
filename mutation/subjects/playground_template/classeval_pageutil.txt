import inspect


<generated_code_here>


class PageUtilTestGetPage:
    def setUp(self):
        self.data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        self.page_size = 3
        self.page_util = PageUtil(self.data, self.page_size)

    def tes_get_page_1(self):
        page_number = 1
        expected_page = [1, 2, 3]
        actual_page = self.page_util.get_page(page_number)
        return actual_page

    def tes_get_page_2(self):
        page_number = 2
        expected_page = [4, 5, 6]
        actual_page = self.page_util.get_page(page_number)
        return actual_page

    def tes_get_page_3(self):
        page_number = 3
        expected_page = [7, 8, 9]
        actual_page = self.page_util.get_page(page_number)
        return actual_page

    def tes_get_page_4(self):
        page_number = 4
        expected_page = [10]
        actual_page = self.page_util.get_page(page_number)
        return actual_page

    def tes_get_page_5(self):
        invalid_page_number = 0
        empty_page = []
        actual_page = self.page_util.get_page(invalid_page_number)
        return actual_page


class PageUtilTestGetPageInfo:
    def setUp(self):
        self.data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        self.page_size = 3
        self.page_util = PageUtil(self.data, self.page_size)

    def tes_get_page_info_1(self):
        page_number = 2
        expected_info = {
            "current_page": 2,
            "per_page": 3,
            "total_pages": 4,
            "total_items": 10,
            "has_previous": True,
            "has_next": True,
            "data": [4, 5, 6]
        }
        actual_info = self.page_util.get_page_info(page_number)
        return actual_info

    def tes_get_page_info_2(self):
        page_number = 1
        expected_info = {
            "current_page": 1,
            "per_page": 3,
            "total_pages": 4,
            "total_items": 10,
            "has_previous": False,
            "has_next": True,
            "data": [1, 2, 3]
        }
        actual_info = self.page_util.get_page_info(page_number)
        return actual_info

    def tes_get_page_info_3(self):
        page_number = 3
        expected_info = {
            "current_page": 3,
            "per_page": 3,
            "total_pages": 4,
            "total_items": 10,
            "has_previous": True,
            "has_next": True,
            "data": [7, 8, 9]
        }
        actual_info = self.page_util.get_page_info(page_number)
        return actual_info

    def tes_get_page_info_4(self):
        page_number = 4
        expected_info = {
            "current_page": 4,
            "per_page": 3,
            "total_pages": 4,
            "total_items": 10,
            "has_previous": True,
            "has_next": False,
            "data": [10]
        }
        actual_info = self.page_util.get_page_info(page_number)
        return actual_info

    def tes_get_page_info_5(self):
        invalid_page_number = 5
        empty_info = {}
        actual_info = self.page_util.get_page_info(invalid_page_number)
        return actual_info


class PageUtilTestSearch:
    def setUp(self):
        self.data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        self.page_size = 3
        self.page_util = PageUtil(self.data, self.page_size)

    def tes_search_1(self):
        keyword = "1"
        expected_results = {
            "keyword": "1",
            "total_results": 2,
            "total_pages": 1,
            "results": [1, 10]
        }
        actual_results = self.page_util.search(keyword)
        return actual_results

    def tes_search_2(self):
        keyword = "2"
        expected_results = {
            "keyword": "2",
            "total_results": 1,
            "total_pages": 1,
            "results": [2]
        }
        actual_results = self.page_util.search(keyword)
        return actual_results

    def tes_search_3(self):
        keyword = "3"
        expected_results = {
            "keyword": "3",
            "total_results": 1,
            "total_pages": 1,
            "results": [3]
        }
        actual_results = self.page_util.search(keyword)
        return actual_results

    def tes_search_4(self):
        keyword = "4"
        expected_results = {
            "keyword": "4",
            "total_results": 1,
            "total_pages": 1,
            "results": [4]
        }
        actual_results = self.page_util.search(keyword)
        return actual_results

    def tes_search_5(self):
        keyword = "11"
        expected_results = {
            "keyword": "11",
            "total_results": 0,
            "total_pages": 0,
            "results": []
        }
        actual_results = self.page_util.search(keyword)
        return actual_results


class PageUtilTest:
    def setUp(self):
        self.data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        self.page_size = 3
        self.page_util = PageUtil(self.data, self.page_size)

    def tes_pageutil(self):
        page_number = 1
        expected_page = [1, 2, 3]
        actual_page = self.page_util.get_page(page_number)
        res = []
        res.append(actual_page)

        page_number = 2
        expected_info = {
            "current_page": 2,
            "per_page": 3,
            "total_pages": 4,
            "total_items": 10,
            "has_previous": True,
            "has_next": True,
            "data": [4, 5, 6]
        }
        actual_info = self.page_util.get_page_info(page_number)
        res.append(actual_info)

        keyword = "4"
        expected_results = {
            "keyword": "4",
            "total_results": 1,
            "total_pages": 1,
            "results": [4]
        }
        actual_results = self.page_util.search(keyword)
        res.append(actual_results)
        return res


def obtain_output():
    classes = ['PageUtilTestGetPage',
               'PageUtilTestGetPageInfo',
               'PageUtilTestSearch',
               'PageUtilTest']
    output = []
    output_idx = 0
    for each_class in classes:
        this_class = eval(f"{each_class}()")
        test_functions = [name for name, obj in inspect.getmembers(eval(each_class))
                  if inspect.isfunction(obj)]
        for each_func in test_functions:
            function_output = eval(f"this_class.{each_func}()")
            output.append((output_idx,function_output))
            output_idx += 1


obtain_output()