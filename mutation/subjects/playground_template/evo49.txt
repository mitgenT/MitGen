from wrapt_timeout_decorator import *

<generated_code_here>

import numpy as np
from numpy import nan, inf # for some outputs.
import sys

sys.set_int_max_str_digits(0)

from enum import IntEnum, auto

def is_floats(x) -> bool:
    # check if it is float; List[float]; Tuple[float]
    # TODO: search for any close floats? (other data structures)
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False


class DataType(IntEnum):
    Float = auto()
    Bool = auto()
    Int = auto()
    Str = auto()
    Null = auto()
    Tuple = auto()
    List = auto()
    Dict = auto()
    Set = auto()
    Type = auto()
    Unknown = auto()


def get_type(x):
    if x is None:
        return DataType.Null
    elif isinstance(x, bool):
        return DataType.Bool
    elif isinstance(x, int):
        return DataType.Int
    elif isinstance(x, str):
        return DataType.Str
    elif is_floats(x):
        return DataType.Float
    elif isinstance(x, tuple):
        return DataType.Tuple
    elif isinstance(x, list):
        return DataType.List
    elif isinstance(x, dict):
        return DataType.Dict
    elif isinstance(x, set):
        return DataType.Set
    elif isinstance(x, type):
        return DataType.Type
    else:
        return DataType.Unknown


def is_equal(x, y) -> tuple[bool, str]:
    x_type, y_type = get_type(x), get_type(y)
    if x_type != y_type:
        return False, "Type mismatch: {} vs {}".format(str(x_type), str(y_type))

    if x_type in [DataType.Int, DataType.Bool, DataType.Null, DataType.Str, DataType.Set, DataType.Type]:
        if x == y:
            return True, None
        try:
            error_msg = "INT/BOOL/NULL/ Value mismatch: {} vs {}".format(repr(x)[:300], repr(y)[:300])
        except:
            error_msg = "Value mismatch: too large for display"
        return False, error_msg
    elif x_type == DataType.Float:
        if np.allclose(x, y, equal_nan=True, atol=1e-6): # guard against nan
            return True, None
        else:
            return False, "FLOAT Value mismatch: {} vs {}".format(x, y)
    elif x_type in [DataType.List, DataType.Tuple]:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for i in range(len(x)):
            equal, msg = is_equal(x[i], y[i])
            if not equal:
                return False, msg
        return True, None
    elif x_type == DataType.Dict:
        if len(x) != len(y):
            return False, "Length mismatch: {} vs {}".format(len(x), len(y))
        for k, v in x.items():
            if k not in y:
                return False, "DICT Value mismatch: key {} in {} but not in {}".format(k, x, y)
            equal, msg = is_equal(v, y[k])
            if not equal:
                return False, msg
        return True, None
    else:
        try:
            if x == y:  # e.g., object comparison
                return True, None
            else:
                return False, "ELSE Value mismatch: {} vs {}".format(x, y)
        except:
            return False, "Unsupported type: {} <-- {}".format(x_type, type(x))

def check(candidate):
    inputs = [eval(f"[{i}]") for i in ['100, 100, 10', '100, 101, 1', '3, 11, 2', '0, 101, 2', '1101, 101, 2', '3, 5, 2', '1000000, 10000, 5000', '123456, 2345, 345', '1000, 100, 100', '987654, 5432, 1234', '789012, 4567, 890', '100000, 9999, 8888', '111111, 2222, 333', '0, 1000, 500', '999999, 100, 1', '10**6, 9999, 5000', '999999, 8888, 4444', '222222, 10000, 9999', '405000, 4050, 2025', '500000, 5000, 2500', '999999, 10000, 9999', '1000000, 9000, 4500', '600000, 8000, 4000', '700000, 7000, 3500', '800000, 6000, 3000', '900000, 5000, 2500', '123456, 7890, 3456', '1000000, 10000, 9999', '500000, 9999, 1', '750000, 10000, 9998', '250000, 9998, 5000', '999999, 9999, 5000', '5000, 10000, 2500', '800000, 10000, 500', '200000, 10000, 5000', '100000, 10000, 7500', '600000, 10000, 2500', '0, 10000, 9999', '1000000, 10000, 9999', '1000000, 10000, 1', '1, 2, 1', '1000000, 2, 1', '1, 10000, 1']]
    outputs = [-1, -1, 10, 3, 4, 0, -1, 136, -1, 1298, 942, 5556, 159, -1, -1, 1668, -1, 2303, -1, -1, 4687, -1, -1, -1, -1, -1, 5932, 9375, -1, 9374, 9204, 3334, -1, -1, -1, 6876, -1, 0, 9375, -1, -1, -1, -1]
    to_output = []
    for i, (inp, exp) in enumerate(zip(inputs, outputs)):
        try:
            to_output.append((i,compute_output(candidate,inp)))
        except:
            to_output.append((i,"Exception"))
    print(f"Final output of subject for prioritization is:::::{to_output}")

@timeout(5)
def compute_output(candidate,inp):
    return candidate(*inp)
    
check(modp)
