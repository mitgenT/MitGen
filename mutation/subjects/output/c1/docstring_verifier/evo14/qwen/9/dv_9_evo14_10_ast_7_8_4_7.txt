from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    n = len(string)
    pairs = []
    for i in range(min_length, n - 1):
        for j in range(i, n + 1 - min_length):
            """
            Generate a sorted list containing all non-overlapping prefix-suffix pairs from the given string.
            Each pair must contain strings of at least 'min_length' characters. The list is organized with pairs
            of equal length sorted in ascending order by their lengths. If multiple pairs share the same length,
            they are further sorted lexicographically.
            Example:
            >>> all_prefix_suffix_pairs('abcadg', 2)
            [('ab', 'dg'), ('abc', 'dg'), ('abca', 'dg')]
            """
            n = len(string)
            pairs = []
            for i in range(min_length, n - 1):
                for j in range(i, n + 1 - min_length):
                    pairs.append((string[:i], string[j - 1:i + 1]))
    pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))
    return pairs
