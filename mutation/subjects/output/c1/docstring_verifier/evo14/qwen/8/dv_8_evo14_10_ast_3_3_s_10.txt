from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    """
    This function outputs a list of all non-overlapping prefix-suffix pairs derived from the provided string.
    Each pair must meet the criteria of having a minimum length 'min_length', and should be arranged in ascending order based on their lengths.
    In cases where multiple pairs share the same length, they will be further sorted lexicographically.
    For instance, when applying this function to the string 'abcadg' with a minimum length of 2,
    the output would include [('ab', 'dg'), ('abc', 'dg'), ('abca', 'dg')].
    """
    n = len(string)
    pairs = []
    for i in range(min_length, n - 1):
        for j in range(i, n + 1 - min_length):
            if len(set(string[:i]).intersection(set(string[j:]))) == 0:
                pairs.append((string[:i], string[j:]))
    pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))
    return pairs