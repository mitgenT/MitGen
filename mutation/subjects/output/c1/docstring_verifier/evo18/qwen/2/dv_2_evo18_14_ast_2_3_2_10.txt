def how_many_times(string: str, substrings: list) -> dict:
    """
    Calculate the frequency of each provided substring within the original string, considering overlapping occurrences.
    The function returns a dictionary with substrings as keys and their counts as values.
    It handles empty substrings by returning "Substrings cannot be empty".
    If the input string is empty, the output will have zero counts for all substrings.
    If a substring appears multiple times in the input list, its count increases.
    """
    if not any(sub for sub in substrings):
        return "Substrings cannot be empty"
    if not string:
        result = {sub: 0 for sub in substrings}
    else:
        result = {sub: 0 for sub in substrings}
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
