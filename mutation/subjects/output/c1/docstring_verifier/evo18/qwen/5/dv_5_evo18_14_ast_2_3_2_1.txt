def how_many_times(string: str, substrings: list) -> dict:
    """
    This function determines the frequency of each provided substring within the original string, considering overlapping occurrences.
    It returns a dictionary with substring keys and their respective counts. An error message "Substrings cannot be empty" is returned if any empty string is given.
    For an empty input string, the function returns a dictionary with zeros as counts for all substrings. If a substring appears multiple times in the input list, its count is incremented accordingly.
    Examples:
    1. No matches for an empty string: `how_many_times('', ['a']) -> {'a': 0}`
    2. All 'a's counted: `how_many_times('aaa', ['a', 'a']) -> {'a': 6}`
    3. Multiple 'aa' and 'a': `how_many_times('aaaa', ['aa', 'a']) -> {'aa': 3, 'a': 4}`
    4. Equal counts for each character: `how_many_times('abcabc', ['a', 'b', 'c']) -> {'a': 2, 'b': 2, 'c': 2}`
    """
    if '' in substrings:
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
