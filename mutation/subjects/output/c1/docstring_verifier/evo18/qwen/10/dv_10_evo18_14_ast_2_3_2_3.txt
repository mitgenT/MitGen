def how_many_times(string: str, substrings: list) -> dict:
    """
    This function calculates the frequency of each provided substring within the original string, considering overlapping occurrences.
    It returns a dictionary with substrings as keys and their respective counts. If any empty substring is encountered, it responds with "Substrings cannot be empty".
    An empty input string yields a dictionary with zeros for all substrings. If a substring appears multiple times in the list, its count increments accordingly.
    """
    if not string or not substrings:
        if not string:
            message = "Substrings cannot be empty"
        else:
            message = "An empty input string"
        return {sub: 0 for sub in substrings} if not substrings else {message: 0}
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
