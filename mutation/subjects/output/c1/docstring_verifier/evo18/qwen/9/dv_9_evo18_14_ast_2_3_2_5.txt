def how_many_times(string: str, substrings: list) -> dict:
    """
    This function determines the frequency of each provided substring within the original string, considering overlapping occurrences.
    It returns a dictionary with substrings as keys and their respective counts. If an empty substring is encountered, it responds with "Substrings cannot be empty."
    For an empty input string, the output will have zero counts for all substrings. If a substring appears multiple times in the given list, its count increments accordingly.
    Examples:
    1. No matches for empty string: `how_many_times('', ['a'])` -> `{ 'a': 0 }`
    2. Multiple 'a's in 'aaa': `how_many_times('aaa', ['a', 'a'])` -> `{ 'a': 6 }`
    3. 'aa' and 'a' in 'aaaa': `how_many_times('aaaa', ['aa', 'a'])` -> `{ 'aa': 3, 'a': 4 }`
    4. Equal counts for 'a', 'b', and 'c': `how_many_times('abcabc', ['a', 'b', 'c'])` -> `{ 'a': 2, 'b': 2, 'c': 2 }`
    """
    if not string or not substrings:
        if not string:
            message = "Substrings cannot be empty."
            return message
        else:
            return {sub: 0 for sub in substrings}
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
