## Output
```python
from typing import List, Union

def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            if i % 2 == 0:
                result.append(float(numbers[i]))
                result.append(delimeter)
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```
In this solution, a flag `set_float` is added to check if the delimiter is a float, and if true, the function inserts the float delimiter only when the index is even. A second append operation is performed at the end of the loop when the index is less than the limit, to add the final element of the input list without any delimiter.