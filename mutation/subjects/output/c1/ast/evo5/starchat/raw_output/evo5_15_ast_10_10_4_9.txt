```python
from typing import List, Union

def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            if i <= limit:
                result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    result.append(numbers[-1])  # Add the last element separately as it won't have a following delimeter
    return result
```

The added lines use a conditional to ensure that only the first 'limit' numbers will be converted to float before being added to the result list, while the last line adds the last number of the input list to the result list, avoiding a trailing delimeter.