```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    result.append(numbers[-1])  # Don't forget to append the last element of the list
    return result
```
I appended the last element of the list because there's no need for a delimeter after it, according to the problem requirements. The'set_float' variable was used to handle integers and floating point numbers correctly.