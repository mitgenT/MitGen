## Output
```python
from typing import List, Union

def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            if set_float:
                result.append(float(delimeter))
            else:
                result.append(delimeter)
        else:
            result.append(numbers[i + 1])
    return result
```

In the solution, I added two condition checks inside the for loop. The first condition checks if we've reached the 'limit', and if so, adds the number directly to the result list instead of a 'delimeter'. The second condition checks the type of 'delimeter' and appends it to the result list as a float if necessary.