```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i, num in enumerate(numbers):
        result.append(num)
        if i < limit:
            result.append(delimeter)
    if set_float:
        result = [float(x) for x in result]
    return result
```

In the solution, I first check if the `delimeter` is a `float` and set `set_float` to `True` accordingly. Then, I loop through the `numbers`, append each number to the `result` list, and append the `delimeter` if it hasn't reached the `limit`. Finally, if `set_float` is `True`, I convert each element of the `result` list to a `float`.