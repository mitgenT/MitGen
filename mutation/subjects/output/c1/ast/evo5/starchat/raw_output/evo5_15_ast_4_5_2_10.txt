## Output

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if isinstance(delimeter, float):
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```
I added a condition to check if the `delimeter` is a float. If so, I set `set_float` to True, which then converts the elements of `numbers` to float before appending them to the `result` list. If the `delimeter` is not a float, I leave the elements of `numbers` as they are.