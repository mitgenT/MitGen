Here's the filled-in code:

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```
In this code, after appending the current number, it checks if the index is less than the limit. If it is, then it appends the delimeter. This way, it adds the delimeter between every two consecutive elements of the input list 'numbers' up to 'limit' times. The type of delimeter (int or float) is checked and used appropriately.