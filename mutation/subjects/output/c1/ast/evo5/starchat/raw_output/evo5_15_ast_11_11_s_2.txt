```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        if i > 0:  # we don't want to append delimeter at the start
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result + [numbers[-1]]  # append the last number separately
```

In this solution, I check if the delimeter is a float and update the result list accordingly. Then I insert the delimeter after every element for the first 'limit' iterations except for the first element. Finally, I append the last number separately to the result list.