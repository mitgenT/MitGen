```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if not all(isinstance(num, int) for num in numbers):
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```

In the above solution, we first check if all the numbers in the input list are integers. If they aren't, we set `set_float` to `True`, indicating that the output list should also be in float. We then append each number (converted to float if necessary) and the delimiter (up to the specified limit) to the result list, and finally return the result.