## Output
```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = any(isinstance(i, float) for i in numbers)
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```
In the solution, the variable `set_float` is used to check if there are any float numbers in the input list `numbers`. If it's `True`, the output will also be in float, otherwise, it will be in integer. Then, after checking the limit, the delimeter will be appended up to `limit` times between every two consecutive elements of the list.