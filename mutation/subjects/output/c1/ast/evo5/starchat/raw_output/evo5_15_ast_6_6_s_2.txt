## Output
```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    result = []
    if type(delimeter) == float:
        set_float = True
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    if set_float:
        result.append(float(numbers[-1]))
    else:
        result.append(numbers[-1])
    return result
```

In the solution, firstly, I initialize an empty list `result` to store the final result. Then, before the loop, I check if the `delimeter` is a `float`, then set `set_float` as `True`. After the loop, I add the last element of the `numbers` list to the `result` list, if `set_float` is `True`, convert it to float first. Finally, return the `result` list.