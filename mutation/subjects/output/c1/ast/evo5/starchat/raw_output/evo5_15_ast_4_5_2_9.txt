```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = isinstance(numbers[0], float) or isinstance(delimeter, float)
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```
In the given solution, I first check whether the initial number in the list or the delimeter is a float type and store this information in `set_float`. Then when appending numbers to the `result` list, I convert them to float if `set_float` is True.