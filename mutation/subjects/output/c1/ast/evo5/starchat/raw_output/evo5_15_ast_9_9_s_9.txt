Infilling `<MASK>` with an if-else condition, checking if `set_float` is True and using float conversion only when needed:

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```
In the given example, the `set_float` flag will be True if the `delimeter` is a float, otherwise it will remain False. During the iteration, `result.append(float(numbers[i]))` will be used to convert numbers into floats only when needed. This solution ensures that the time complexity remains O(n).