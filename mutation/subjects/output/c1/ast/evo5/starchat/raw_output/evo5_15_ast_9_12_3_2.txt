```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    if set_float:
        result.append(float(numbers[-1]))
    else:
        result.append(numbers[-1])
    return result
```
In the revised code, I append each element from the `numbers` list to `result` and, if the current iteration index is less than `limit`, I append the `delimeter` as well. At the end, I append the last element in the `numbers` list (either as a float or int based on the type of `delimeter`). This ensures that the `delimeter` is only inserted up to `limit` times and that the list maintains the correct data types.