## Output
```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    result.append(numbers[0])
    for i in range(1, len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    result.append(numbers[-1])
    return result
```
In the solution, I added `result.append(numbers[0])` outside the loop so that the first number of the input list is always added to the result list. Then in the for loop, after adding a number to the `result` list, I added the `delimeter` if the current index is less than `limit`. Finally, I added the last number of the input list to the `result` list. This ensures that all elements of the input list are considered and the `delimeter` is inserted up to `limit` times.