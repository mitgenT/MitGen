```python
from typing import List, Union

def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result + [numbers[-1]]  # Add the last number separately to avoid an extra delimiter
```

This solution first checks if the `delimeter` is a float, then in every loop, it checks if it's within the `limit` and adds the `delimeter` to `result` accordingly. It also converts the integer numbers to float if needed. At the end, it adds the last number to `result` separately to avoid an extra delimiter.