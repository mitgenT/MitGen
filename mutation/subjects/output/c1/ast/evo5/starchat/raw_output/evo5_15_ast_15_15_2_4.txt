```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    if i < len(numbers) - 1:
        if set_float:
            result.append(float(numbers[-1]))
        else:
            result.append(numbers[-1])
```

In this solution, after filling up the list'result' with interspersed elements, the function checks if there's any remaining number left from the 'numbers' list and appends it to the'result' list after converting to the right type (float or int).