## Output
```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    if set_float:
        result.append(float(numbers[0]))
    else:
        result.append(numbers[0])
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if i < limit:
            if set_float:
                result.append(float(delimeter))
            else:
                result.append(delimeter)
        if set_float:
            result.append(float(numbers[i + 1]))
        else:
            result.append(numbers[i + 1])
    return result
```
In this program, I added separate checks to handle `int` and `float` for both the 'numbers' and 'delimeter'. I initialized the `result` list, added the first number from 'numbers', and then used a single loop to check if the 'delimeter' needs to be inserted based on 'limit'. Then, the program either appended 'numbers' in float or int based on'set_float' flag. In the end, it returned the'result'.