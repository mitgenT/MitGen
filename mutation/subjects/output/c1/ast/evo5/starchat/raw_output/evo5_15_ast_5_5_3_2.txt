## Output

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        if len(numbers)!= len(set(numbers)) or sum(isinstance(n, float) for n in numbers):
            set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```

In the solution above, I added checks to determine whether to cast numbers in the input list to float based on whether they are all integers or all floats. This will ensure that the output list contains numbers of the same data type as the input `delimeter`.