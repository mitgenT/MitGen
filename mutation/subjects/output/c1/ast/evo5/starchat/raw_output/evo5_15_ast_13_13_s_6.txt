## Output
```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            <MASK>
                result.append(delimeter)
        else:
            <MASK>
                result.append(numbers[i + 1])
    return result
```

In the above output, `<MASK>` has been replaced with the condition `i < limit` and `result.append(numbers[i + 1])` inside the `else` block. This will ensure that the interspersing of the delimiter between the elements happens only 'limit' number of times. After the limit, the rest of the elements are appended without a delimiter.