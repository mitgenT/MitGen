## Output

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers)):
        if i > 0:
            if set_float:
                result.append(float(numbers[i]))
            else:
                result.append(numbers[i])
            if i < limit:
                result.append(delimeter)
    return result
```

In the given solution, we added the `for` loop to iterate over the `numbers` list. We inserted the `delimeter` between every two consecutive elements up to `limit` times, and if `delimeter` was a float, the output list should also be in float. The if condition inside the loop checks if the current element is not the first one, and if it's within the limit, then it appends the `delimeter` to the result list. Finally, we return the result list.