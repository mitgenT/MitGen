In the given example, the mask is used inside the 'if' statement, comparing two elements. We need to compare 'list1[j]' with 'list1[j+1]' and perform the swap operation if 'list1[j]' is greater than 'list1[j+1]'.

For the given problem, I will replace the <MASK> in the intersperse function with 'i <= limit' in the 'if' condition. And for checking if the delimiter should be a float or an integer, I will add an if statement in 'append' operation to convert 'delimeter' to float if necessary.

Here is the output:

```python
from typing import List, Union

def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if isinstance(delimeter, float):
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i <= limit:
            result.append(delimeter)
    return result
```
This corrected Python program will intersperse the delimiter between consecutive elements of the input list 'numbers', while limiting the number of interspersed 'delimeter' up to 'limit' times. If the delimiter is a float, the output list will also be in float.