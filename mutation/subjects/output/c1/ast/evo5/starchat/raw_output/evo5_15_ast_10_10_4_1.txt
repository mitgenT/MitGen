## Output

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    result.append(numbers[-1])  # Don't forget to add the last element!
    return result

```

Please note that if the limit is equal to `len(numbers) - 1`, I am appending the last number after all the delimiter elements in the previous loop. Otherwise, the last number will be inserted without a delimiter. Depending on your requirement, you may want to adjust the handling of the last element accordingly.