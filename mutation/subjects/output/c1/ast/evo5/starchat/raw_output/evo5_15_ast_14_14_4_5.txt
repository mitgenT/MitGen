## Output

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            if i < len(numbers) - 2:  # check if not last element
                result.append(delimeter)
            else:
                if set_float:
                    result.append(float(numbers[i + 1]))
                else:
                    result.append(numbers[i + 1])
    return result
```

In this solution, I iterate through each element in the numbers list except the last one. I also check the limit to ensure that only the required pairs are processed. Based on whether the delimeter is a float or not, I either append the delimeter or the float version of the number to the result list. Finally, the function returns the result list.