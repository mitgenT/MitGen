## Output
```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        if set_float:
            if i < limit:
                result.append(float(numbers[i]))
        else:
            result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    return result
```

In this solution, we first check if the delimiter is a float. If it is, then we convert all the numbers before the limit into float. Then we append the numbers and delimiter to the result list within the loop. If we have already appended the delimiter for 'limit' times, we skip the appending of the next delimiter. The final result is returned.