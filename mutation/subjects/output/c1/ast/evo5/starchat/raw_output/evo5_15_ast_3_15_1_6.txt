## Output
```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    result = []
    for i, num in enumerate(numbers):
        result.append(num)
        if i < min(len(numbers) - 1, limit):  # check if this is the last one or within limit
            result.append(delimeter)
    return result
```
Here, I used a for-loop to iterate over each element in the numbers list. For each element, I append it to the `result` list. Then, I check if the current index is less than the minimum value between (length of the list minus 1) and the limit. If this condition is true, I append the delimiter to the `result` list. The final result list is then returned. This approach ensures that only up to `limit` pairs of consecutive numbers have the delimiter inserted between them. If the delimiter is a float, the output list will also be in float.