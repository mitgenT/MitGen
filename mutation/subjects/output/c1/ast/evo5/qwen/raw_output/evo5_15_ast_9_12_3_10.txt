Based on the provided docstring, the code should insert the `delimeter` between every two consecutive elements of the `numbers` list up to `limit` times. Here's the filled in code:

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 
    for i in range(len(numbers) - 1):
        result.append(numbers[i])
        if i < limit:
            result.append(delimeter)
    if set_float and type(delimeter) == float:
        result = [float(num) for num in result]
    return result
```

This code first appends each number from the input list to the result list, then inserts the `delimeter` as specified by the `limit`. If `set_float` is `True`, indicating that the `delimeter` is a float, the final list is converted to float values using a list comprehension.