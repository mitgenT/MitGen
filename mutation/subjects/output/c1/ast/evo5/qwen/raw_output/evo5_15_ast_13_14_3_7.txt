Here's the filled-in code:

```python
from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 

    for i in range(len(numbers) - 1):
        if set_float:
            result.append(float(numbers[i]))
        else:
            result.append(numbers[i])

        # Insert the delimiter when the limit is reached or at the end of the loop
        if (i + 1) % limit == 0 or (i == len(numbers) - 2):
            result.append(delimeter)

    # If the last element should be included without a delimiter, add it
    if set_float and i + 1 < len(numbers):
        result.append(float(numbers[i + 1]))
    elif not set_float and i + 1 < len(numbers):
        result.append(numbers[i + 1])

    return result
```