from typing import List, Union
def intersperse(numbers: List[Union[int, float]], delimeter: Union[int, float], limit: int) -> List[Union[int, float]]:
    set_float = False
    if type(delimeter) == float:
        set_float = True
    result = []
    limit = min(limit, len(numbers) - 1) 

    for i in range(len(numbers) - 1):
        if i < limit:  # Insert delimeter if the limit has not been reached
            result.append(numbers[i])
            result.append(delimeter)
        else:  # No need to add more delimiters after limit
            result.append(numbers[i])

    if set_float and isinstance(delimeter, float):  # Convert result to float if necessary
        result = [float(item) for item in result]

    return result