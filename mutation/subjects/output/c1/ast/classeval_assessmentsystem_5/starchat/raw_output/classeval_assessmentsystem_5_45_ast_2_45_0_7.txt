Infill `<MASK>` as follows:

```python
class AssessmentSystem:
    def __init__(self):
        """
        Initialize the students dict in assessment system.
        """
        self.students = {}

    def add_student(self, name, grade, major):
        """
        Add a new student into self.students dict
        :param name: str, student name
        :param grade: int, student grade
        :param major: str, student major
        """
        self.students[name] = {'name': name, 'grade': grade,'major': major, 'courses': {}}

    def add_course_score(self, name, course, score):
        """
        Add score of specific course for student in self.students
        :param name: str, student name
        :param course: str, course name
        :param score: int, course score
        """
        if name in self.students:
            self.students[name]['courses'][course] = score

    def get_gpa(self, name):
        """
        Get average grade of one student.
        :param name: str, student name
        :return: if name is in students and this students have courses grade, return average grade(float)
                    or None otherwise
        """
        if name in self.students and self.students[name]['courses']:
            total_score = sum(self.students[name]['courses'].values())
            return total_score / len(self.students[name]['courses'])
        else:
            return None

    def get_all_students_with_fail_course(self):
        """
        Get all students who have any score blow 60
        :return: list of str,student name
        """
        failed_students = [name for name, detail in self.students.items() if any(score < 60 for score in detail['courses'].values())]
        return failed_students

    def get_course_average(self, course):
        """
        Get the average score of a specific course.
        :param course: str, course name
        :return: float, average scores of this course if anyone have score of this course, or None if nobody have records.
        """
        course_scores = [detail['courses'].get(course) for detail in self.students.values() if course in detail['courses']]
        if course_scores:
            return sum(course_scores) / len(course_scores)
        else:
            return None

    def get_top_student(self):
        """
        Calculate every student's gpa with get_gpa method, and find the student with highest gpa
        :return: str, name of student whose gpa is highest
        """
        top_student = None
        max_gpa = 0
        for name, detail in self.students.items():
            gpa = self.get_gpa(name)
            if gpa is not None and gpa > max_gpa:
                max_gpa = gpa
                top_student = name
        return top_student
```

This completes the implementation of the `AssessmentSystem` class based on the given docstring and requirements.