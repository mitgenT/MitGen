from sys import stdin, stdout
class Solution:
    def BinaryInversions(self, n: int, bits: list) -> int:
        """
        You are given a binary array of length n. You are allowed to perform one operation on it at most once. In an operation, you can choose any element and flip it: turn a 0 into a 1 or vice-versa.
        What is the maximum number of inversions the array can have after performing at most one operation?
        A binary array is an array that contains only zeroes and ones.
        The number of inversions in an array is the number of pairs of indices i,j such that i<j and ai>aj.
    
        Input
        The input consists of multiple test cases. The first line contains an integer t (1<=t<=10^4) - the number of test cases. The description of the test cases follows.
        The first line of each test case contains an integer n (1<=n<=2⋅10^5) - the length of the array.
        The following line contains n space-separated positive integers a1 , a2 ,..., an (0<=ai<=1) - the elements of the array.
        It is guaranteed that the sum of n over all test cases does not exceed 2⋅10^5.
    
        Output
        For each test case, output a single integer  - the maximum number of inversions the array can have after performing at most one operation.
        """
        first, second, orig = bits[::], bits[::], bits[::]
        hasFirst, hasSecond = True, True
        
        for i in range(n):
            if hasFirst and bits[i] == 0:
                first[i] = 1
                hasFirst = False
            if hasSecond and bits[n-i-1] == 1:
                second[n-i-1] = 0
                hasSecond = False
        first_sum, second_sum, orig_sum = 0, 0, 0
        first_zeros, second_zeros, orig_zeros = 0, 0, 0
        for i in range(n-1, -1, -1):
            if first[i] == 0:
                orig_zeros += 1
            else:
                orig_sum += orig_zeros
            if second[i] == 0:
                second_zeros += 1
            else:
                second_sum += second_zeros
                
            if first[i] == 0:
                first_zeros += 1
            else:
                first_sum += first_zeros
        return max(orig_sum, first_sum, second_sum)

sol = Solution()
t = int(input())
for _ in range(t):
    n = int(input())
    bits = list(map(int, input().split()))
    print(sol.BinaryInversions(n, bits))