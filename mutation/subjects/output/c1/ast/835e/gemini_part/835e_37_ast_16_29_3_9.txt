from sys import stdin, stdout
class Solution:
    def BinaryInversions(self, n, bits):
        first, second, orig = bits[::], bits[::], bits[::]
        hasFirst, hasSecond = True, True
        
        for i in range(n):
            if hasFirst and bits[i] == 0:
                first[i] = 1
                hasFirst = False
            if hasSecond and bits[n-i-1] == 1:
                second[n-i-1] = 0
                hasSecond = False
        first_sum, second_sum, orig_sum = 0, 0, 0
        first_zeros, second_zeros, orig_zeros = 0, 0, 0
        for x in range(n):
                    if first[x] == 0: first_zeros += 1
                    if second[x] == 0: second_zeros += 1
                    if orig[x] == 0: orig_zeros += 1
                    first_sum += first_zeros * (first[x] ^ orig[x])
                    second_sum += second_zeros * (second[x] ^ orig[x])
                    orig_sum += orig_zeros * (orig[x])
        return max(orig_sum, first_sum, second_sum)

sol = Solution()
t = int(input())
for _ in range(t):
    n = int(input())
    bits = list(map(int, input().split()))
    print(sol.BinaryInversions(n, bits))
