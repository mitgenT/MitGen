```python
class SQLGenerator:
    def __init__(self, table_name):
        self.table_name = table_name

    def select(self, fields=None, condition=None):
        if fields is None:
            fields = "*"
        if condition is None:
            condition = ""
        else:
            condition = " WHERE " + condition
        sql = f"SELECT {fields} FROM {self.table_name}{condition};"
        return sql

    def insert(self, data):
        fields = ", ".join(data.keys())
        values = ", ".join([f"'{value}'" for value in data.values()])
        sql = f"INSERT INTO {self.table_name} ({fields}) VALUES ({values});"
        return sql

    def update(self, data, condition):
        updates = ", ".join([f"{key} = '{value}'" for key, value in data.items()])
        if condition is None:
            condition = ""
        else:
            condition = " WHERE " + condition
        sql = f"UPDATE {self.table_name} SET {updates}{condition};"
        return sql

    def delete(self, condition):
        if condition is None:
            condition = ""
        else:
            condition = " WHERE " + condition
        sql = f"DELETE FROM {self.table_name}{condition};"
        return sql

    def select_female_under_age(self, age):
        sql = f"SELECT * FROM {self.table_name} WHERE age < {age} AND gender = 'female';"
        return sql

    def select_by_age_range(self, min_age, max_age):
        sql = f"SELECT * FROM {self.table_name} WHERE age BETWEEN {min_age} AND {max_age};"
        return sql
```

In the above solution, the `SQLGenerator` class is completed with the required methods (`select`, `insert`, `update`, `delete`, `select_female_under_age`, and `select_by_age_range`). The `__init__` method is also added to initialize the `table_name` attribute. The methods generate the corresponding SQL statements based on the given parameters.