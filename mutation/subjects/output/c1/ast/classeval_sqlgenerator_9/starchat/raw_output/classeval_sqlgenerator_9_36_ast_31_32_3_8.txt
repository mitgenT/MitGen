In the `select_female_under_age` method, you should check if the age is specified or not and then return the corresponding SQL statement:

```python
def select_female_under_age(self, age):
    if age is None:
        sql = f"SELECT * FROM {self.table_name} WHERE gender = 'female';"
    else:
        sql = f"SELECT * FROM {self.table_name} WHERE age < {age} AND gender = 'female';"
    return sql
```

You should also include a call to the `select_female_under_age` method in the docstring example:

```python
def select_female_under_age(self, age):
    """
    Generates a SQL statement to select females under a specified age.
    :param age: int. The specified age. If age is None, it selects all females.
    :return: str. The generated SQL statement.
    >>> sql.select_female_under_age(30)
    "SELECT * FROM table1 WHERE age < 30 AND gender = 'female';"
    >>> sql.select_female_under_age(None)
    "SELECT * FROM table1 WHERE gender = 'female';"
    """
```

Now, the complete `SQLGenerator` class with the implemented `select_female_under_age` method is as follows:

```python
class SQLGenerator:
    def __init__(self, table_name):
        self.table_name = table_name

    def select(self, fields=None, condition=None):
        if fields is None:
            fields = "*"
        else:
            fields = ", ".join(fields)
        sql = f"SELECT {fields} FROM {self.table_name}"
        if condition is not None:
            sql += f" WHERE {condition}"
        return sql + ";"

    def insert(self, data):
        fields = ", ".join(data.keys())
        values = ", ".join([f"'{value}'" for value in data.values()])
        sql = f"INSERT INTO {self.table_name} ({fields}) VALUES ({values})"
        return sql + ";"

    def update(self, data, condition):
        set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
        sql = f"UPDATE {self.table_name} SET {set_clause} WHERE {condition}"
        return sql + ";"

    def delete(self, condition):
        sql = f"DELETE FROM {self.table_name} WHERE {condition}"
        return sql + ";"

    def select_female_under_age(self, age):
        if age is None:
            sql = f"SELECT * FROM {self.table_name} WHERE gender = 'female';"
        else:
            sql = f"SELECT * FROM {self.table_name} WHERE age < {age} AND gender = 'female';"
        return sql

    def select_by_age_range(self, min_age, max_age):
        condition = f"age BETWEEN {min_age} AND {max_age}"
        return self.select(condition=condition)
```