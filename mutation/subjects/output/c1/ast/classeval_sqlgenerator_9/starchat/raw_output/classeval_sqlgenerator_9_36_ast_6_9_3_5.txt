The provided Python code defines a class `SQLGenerator` which implements methods for generating SQL statements for common operations on a table. Here is the infilled version of the provided code:

```python
class SQLGenerator:
    def __init__(self, table_name):
        self.table_name = table_name

    def select(self, fields=None, condition=None):
        sql = f"SELECT {', '.join(fields) if fields else '*'} FROM {self.table_name}"
        if condition is not None:
            sql += f" WHERE {condition}"
        return sql + ";"

    def insert(self, data):
        fields = ", ".join(data.keys())
        values = ", ".join([f"'{value}'" for value in data.values()])
        sql = f"INSERT INTO {self.table_name} ({fields}) VALUES ({values})"
        return sql + ";"

    def update(self, data, condition):
        set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
        sql = f"UPDATE {self.table_name} SET {set_clause} WHERE {condition}"
        return sql + ";"

    def delete(self, condition):
        sql = f"DELETE FROM {self.table_name} WHERE {condition}"
        return sql + ";"

    def select_female_under_age(self, age):
        condition = f"age < {age} AND gender = 'female'"
        return self.select(condition=condition)

    def select_by_age_range(self, min_age, max_age):
        condition = f"age BETWEEN {min_age} AND {max_age}"
        return self.select(condition=condition)
```

The `select` function now includes a `fields` parameter which allows specifying the fields to be queried. If `fields` is `None`, it defaults to selecting all fields (`*`). The `select_female_under_age` and `select_by_age_range` methods are implemented using the `select` function, taking advantage of its ability to accept a condition parameter.