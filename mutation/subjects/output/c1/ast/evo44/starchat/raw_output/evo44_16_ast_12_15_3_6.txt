## Output

```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if remainder < 10:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(remainder + 55) + new_base_num
    return new_base_num
```

In this solution, <MASK> is replaced with appropriate code to handle the conversion from base-10 to the new_base. We need to convert the remainder to a character if it is greater than 9, using its ASCII value and adding 55. The new digits are added at the beginning of new_base_num to preserve the correct order in the output.