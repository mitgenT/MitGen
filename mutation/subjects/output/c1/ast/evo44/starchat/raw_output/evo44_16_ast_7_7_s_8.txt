## Output

```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if not (2 <= base <= 36 and 2 <= new_base <= 36):
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```
In the given solution, I added a validation check for `base` and `new_base` values before processing the function, returning `'0'` if the input base or new_base is invalid. I also fixed the condition inside the `try` block. The `return "invalid base"` part was mistakenly placed inside the `try` block instead of the `except` block. This will now correctly return `invalid base` when an invalid digit is found for the base.