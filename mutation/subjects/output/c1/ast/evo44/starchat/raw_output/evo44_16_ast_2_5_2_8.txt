## Output
```python
def change_base(x: str, base: int, new_base: int):
    base_10 = 0
    digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    for digit in x.upper():
        if not (digit in digits[:base]):
            return "invalid base"
        base_10 = base_10 * base + digits.index(digit)
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```

In this solution, I added the code to calculate base_10 number from the input string x. Then, I used that to convert to the new_base number and handled digits greater than 9 by using ASCII conversion. I also included a validation for the base, returning "invalid base" if the input string x contains invalid digits for its base.