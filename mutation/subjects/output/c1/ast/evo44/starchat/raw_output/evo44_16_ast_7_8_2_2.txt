## Output

```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    assert 2 <= base <= 36 and 2 <= new_base <= 36, "Invalid base value. Base and new_base should be between 2 and 36."
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```

In this code, I added an assertion statement that checks if both base and new_base values are within the range of 2 to 36. This helps to validate the input and prevent any errors. The program then converts the input number from its original base to base 10 and from base 10 to the desired new base. In the process, it handles the conversion of digits greater than 9 by using uppercase letters from 'A' to 'Z'. If the input number contains invalid digits for its base, the program returns "invalid base".