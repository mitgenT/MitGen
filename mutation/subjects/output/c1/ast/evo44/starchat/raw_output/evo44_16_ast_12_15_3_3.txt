```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if remainder >= 10:
            new_base_num = chr(ord('A') + remainder - 10) + new_base_num
        else:
            new_base_num = str(remainder) + new_base_num
    return new_base_num
```
In the solution, I have added an if-else condition to determine whether the remainder after each division (which represents a digit in the new base) is greater than or equal to 10. If it is, the digit is represented as a character in uppercase using ASCII codes. Otherwise, the digit is represented as a string. This ensures that the returned string respects the requirements specified in the docstring, using uppercase letters for digits above 9 in the new base.