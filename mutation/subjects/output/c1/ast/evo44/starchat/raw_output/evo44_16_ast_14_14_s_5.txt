## Output
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        elif remainder >= 10 and remainder <= 35:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```

In the output code, I've added an if-else block to handle the case where the remainder is between 10 and 35. In such cases, we convert the remainder number to its uppercase hexadecimal letter using the ASCII value. The ASCII value for '0' to '9' is 48 to 57, and 'A' to 'Z' is 65 to 90. For the numbers 10 to 35, we add 55 to the remainder to get the corresponding ASCII value.