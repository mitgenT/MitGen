## Output
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if remainder < 10:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(ord('A') + remainder - 10) + new_base_num
    return new_base_num
```
Here, in the while loop, I have used `if-else` condition to check if the remainder after division is less than 10. If it is, I directly convert it to a string. Otherwise, I convert it to an uppercase character, as specified in the given docstring, by adding the ASCII value of 'A' minus 10 to the remainder. This conversion is then prepended to the `new_base_num` string.