## Output
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        elif remainder >= 10:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```

I added another condition in the `while` loop to handle digits above 9 when changing base. If `remainder` is equal to or greater than 10, I convert it to a character by adding 55 to the remainder and then convert that character to a string, concatenating it to the `new_base_num`.