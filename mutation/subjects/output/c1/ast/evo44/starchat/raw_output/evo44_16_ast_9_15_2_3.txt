## Output
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10:
        base_10, remainder = divmod(base_10, new_base)
        if remainder < 10:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(ord('A') + remainder - 10) + new_base_num
    return new_base_num
```

The provided code converts a number from one base to another by changing the representation of the number in base 10. The <MASK> in the given code snippet has been filled with the logic to convert the number from base 10 to the desired new base. The solution handles the case of invalid bases by returning the string "invalid base". It also correctly handles converting the number zero to the string '0'. In the final conversion, digits larger than 9 are represented by uppercase letters.