## Output
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    
    new_base_num = ''
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 //= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```

In this code, I fixed the division operator from '/' to '//' to ensure correct integer division when calculating the remainder in base conversion. I also initialized an empty string 'new_base_num' to store the converted number. The function now correctly converts a positive string representation of a number from one base to another, handling invalid digits for the base.