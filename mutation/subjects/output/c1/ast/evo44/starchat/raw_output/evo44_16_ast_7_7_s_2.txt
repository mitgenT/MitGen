```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```

In this solution, I added a conditional check `if base_10 == 0: return '0'` to handle the special case when the input number `base_10` is zero. This ensures that the function will return '0' when the input number is '0' in any base. After that, the function uses a while loop to calculate the digits in the new base and concatenate them to form the final result.