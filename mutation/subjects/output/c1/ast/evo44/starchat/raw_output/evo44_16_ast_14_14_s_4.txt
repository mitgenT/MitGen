## Output
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        elif remainder > 9:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```

In the given solution, the `<MASK>` in the conditional statement inside the while loop has been filled to check for a remainder greater than 9 and then using the `chr()` function to convert that value to uppercase hexadecimal character (since the new base is assumed to be between 2 and 36).