## Output

```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10:
        new_base_num = str(base_10 % new_base).upper() + new_base_num
        base_10 //= new_base
    return new_base_num
```

In this code, I've filled the `<MASK>` area with a while loop that continuously divides `base_10` by `new_base` and appends the remainder converted to uppercase string to `new_base_num`. The loop continues until `base_10` becomes 0. The resulting `new_base_num` is then returned.