## Output
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        elif 10 <= remainder <= 35:
            new_base_num = chr(remainder + 55) + new_base_num
    return new_base_num
```

In this updated program, `chr(remainder + 55)` is used to convert numbers 10-35 to uppercase letters for the new base representation. The `elif` condition checks for numbers greater than 9 and less than or equal to 35.