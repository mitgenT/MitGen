new_base_10 = remainder
if remainder > 9:
    remainder = chr(remainder + 55)
new_base_num = str(remainder) + new_base_num
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if base_10 == 0:
        return '0'
    while base_10 > 0:
        remainder = base_10 % new_base
        new_base_10 = remainder
        if remainder > 9:
            remainder = chr(remainder + 55)
        new_base_num = str(remainder) + new_base_num 
        base_10 = base_10 // new_base
    return new_base_num
```
In the solution, `<MASK>` is replaced to calculate `new_base_10` and transform `remainder` into character if necessary before updating `new_base_num`. The division operation (`base_10 = base_10 // new_base`) is performed after updating `new_base_num` to accurately calculate the next digit in the new base representation. This step is essential to ensure the correct conversion.