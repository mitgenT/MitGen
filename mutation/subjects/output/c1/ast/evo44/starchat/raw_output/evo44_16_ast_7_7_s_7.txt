## Output
```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    if not (2 <= base <= 36) or not (2 <= new_base <= 36):
        return '0'  # Return '0' if the base or new_base numbers are invalid
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 -= new_base
        if 0 <= remainder <= 9:
            new_base_num = str(remainder) + new_base_num
        else:
            new_base_num = chr(remainder + 55) + new_base_num 
    return new_base_num
```
I added a condition to check the validity of both base and new_base numbers, returning '0' if they are invalid. This condition is implemented after we convert x to base_10. In the next step, base_10 is converted to new_base.