```python
def change_base(x: str, base: int, new_base: int):
    try:
        base_10 = int(x, base)
    except ValueError:
        return "invalid base"
    new_base_num = ""
    # Initialize a dictionary to convert digits from base 10 to any base 
    digits = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 
              6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 
              11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F', 
              16: 'G', 17: 'H', 18: 'I', 19: 'J', 20: 'K', 
              21: 'L', 22: 'M', 23: 'N', 24: 'O', 25: 'P', 
              26: 'Q', 27: 'R', 28: 'S', 29: 'T', 30: 'U', 
              31: 'V', 32: 'W', 33: 'X', 34: 'Y', 35: 'Z'}
    while base_10 > 0:
        remainder = base_10 % new_base
        base_10 //= new_base
        new_base_num = digits[remainder] + new_base_num
    return new_base_num
```
Here we initialize a dictionary 'digits' for easy conversion of digits from base 10 to any base within the given constraints. Then, we use integer division (`//=`) instead of subtraction (`-=`) to simplify the calculation inside the while loop. And finally, we use the dictionary to convert digits from base 10 to the desired new_base.