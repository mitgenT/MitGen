```python
from typing import List, Tuple

def interleave_and_concatenate(strings: List[str], integers: List[int]) -> Tuple[str, int]:
    interleaved = []
    len_strings = len(strings)
    len_integers = len(integers)
    max_len = max(len_strings, len_integers)
    for i in range(max_len):
        if i < len_strings:
            interleaved.append(strings[i])
        if i < len_integers:
            if isinstance(integers[i], int):
                interleaved.append(integers[i])
    concatenated_string = ' '.join([str(i) for i in interleaved if isinstance(i, str)]) 
    sum_integers = sum([i for i in interleaved if isinstance(i, int)])
    return (concatenated_string, sum_integers)
```
Here, I replaced `<MASK>` with `isinstance(integers[i], int)`, which checks if the current element in the `integers` list is an integer before appending it to the `interleaved` list. This ensures that we only add integers when their corresponding index is within the bounds of the `integers` list. The rest of the code remains the same.