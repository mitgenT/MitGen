Here is the full program with filled <MASK> parts:

```python
class AssessmentSystem:
    def __init__(self):
        self.students = {}

    def add_student(self, name, grade, major):
        self.students[name] = {'name': name, 'grade': grade,'major': major, 'courses': {}}

    def add_course_score(self, name, course, score):
        if name in self.students:
            self.students[name]['courses'][course] = score

    def get_gpa(self, name):
        course_scores = self.students[name]['courses'].values()
        return sum(course_scores) / len(course_scores) if len(course_scores) > 0 else None

    def get_all_students_with_fail_course(self):
        students = []
        for name, student in self.students.items():
            for course, score in student['courses'].items():
                if score < 60:
                    students.append(name)
                    break
        return students

    def get_course_average(self, course):
        total = 0
        count = 0
        for student in self.students.values():
            if course in student['courses']:
                score = student['courses'][course]
                if score is not None:
                    total += score
                    count += 1
        return total / count if count > 0 else None

    def get_top_student(self):
        top_student = None
        top_gpa = 0
        for name, student in self.students.items():
            gpa = self.get_gpa(name)
            if gpa is not None and gpa > top_gpa:
                top_gpa = gpa
                top_student = name
        return top_student
```

In this solution, the get_gpa and get_top_student functions use the helper function get_gpa to reduce code duplication. The get_all_students_with_fail_course uses separate for loops to iterate over the students and courses, instead of combining them with break statements as the original code. This leads to more readable and maintainable code.
```python
class AssessmentSystem:
    def __init__(self):
        self.students = {}

    def add_student(self, name, grade, major):
        self.students[name] = {'name': name, 'grade': grade,'major': major, 'courses': {}}

    def add_course_score(self, name, course, score):
        if name in self.students:
            self.students[name]['courses'][course] = score

    def get_gpa(self, name):
        course_scores = self.students[name]['courses'].values()
        return sum(course_scores) / len(course_scores) if len(course_scores) > 0 else None

    def get_all_students_with_fail_course(self):
        students = []
        for name, student in self.students.items():
            for course, score in student['courses'].items():
                if score < 60:
                    students.append(name)
                    break
        return students

    def get_course_average(self, course):
        total = 0
        count = 0
        for student in self.students.values():
            if course in student['courses']:
                score = student['courses'][course]
                if score is not None:
                    total += score
                    count += 1
        return total / count if count > 0 else None

    def get_top_student(self):
        top_student = None
        top_gpa = 0
        for name, student in self.students.items():
            gpa = self.get_gpa(name)
            if gpa is not None and gpa > top_gpa:
                top_gpa = gpa
                top_student = name
        return top_student


# Test the code
system = AssessmentSystem()

system.add_student('student 1', 3, 'SE')
system.add_course_score('student 1','math', 94)
system.add_course_score('student 1', 'Computer Network', 92)

system.add_student('student 2', 2, 'SE')
system.add_course_score('student 2', 'Computer Network', 97)

system.add_student('student 3', 1, 'SE')
system.add_course_score('student 3','math', 59)
system.add_course_score('student 3', 'Computer Network', 60)

system.get_all