import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas
    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return itertools.permutations(range(1, n+1), n).__len__()
        return itertools.permutations(range(1, n+1), m).__len__()
    @staticmethod
    def count_all(n):
        return sum(ArrangementCalculator.count(n, m) for m in range(1, n+1))
    def select(self, m=None):
        if m is None:
            return list(itertools.permutations(self.datas))
        return list(itertools.permutations(self.datas, m))
    def select_all(self):
        return [p for i in range(1, len(self.datas) + 1) for p in itertools.permutations(self.datas, i)]
    @staticmethod
    def factorial(n):
        return 1 if n == 0 else n * ArrangementCalculator.factorial(n - 1)