Infill <MASK> in the given code with:

```python
result = []
for permutation in itertools.permutations(self.datas, m):
    result.append(list(permutation))
```

The completed code will look like this:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)

    def select(self, m=None):
        result = []
        if m is None:
            m = len(self.datas)
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

```

The bug in the `count_all` method is that there is no variable `total` being updated inside the loop, so the method always returns `0` as the result. To fix this, you need to initialize `total` outside the loop and update it inside, like so:

```python
@staticmethod
def count_all(n):
    total = 0
    for i in range(1, n + 1):
        total += ArrangementCalculator.count(n, i)
    return total
```