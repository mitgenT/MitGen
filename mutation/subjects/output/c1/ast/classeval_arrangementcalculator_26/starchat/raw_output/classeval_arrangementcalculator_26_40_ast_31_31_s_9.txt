The bug location in the given code is near the line `ArrangementCalculator.count_all(n)`. The correct formula for counting all possible arrangements is `2^n`, not `ArrangementCalculator.count(n, i)`.

Here is the infilled code:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        return 2**n

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

Note: I've replaced `ArrangementCalculator.count(n, i)` with `2**n` for counting all possible arrangements. The bug was likely due to misunderstanding the arrangement problem definition. It should be `2^n` because any item can either be selected or not selected, giving a binary choice (`0` or `1`) for each item, hence the total count is `2^n`.