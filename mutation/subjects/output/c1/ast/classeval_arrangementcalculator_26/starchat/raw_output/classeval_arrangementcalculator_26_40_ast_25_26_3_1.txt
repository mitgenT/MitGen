Infill `<MASK>` of the given code with `itertools.combinations(self.datas, m)` to generate arrangements by selecting m items from the internal `datas`. Here's the corrected code:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for combination in itertools.combinations(self.datas, m):
            result.append(list(combination))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```
In this updated code, the `select` method uses `itertools.combinations(self.datas, m)` to generate all combinations of m items from the `datas` and appends each combination to the `result` list. Then the `select_all` method calls the `select` method for each value from 1 to the number of `datas` and extends the `result` list with the generated combinations. The bug at the mentioned location is now fixed as well.