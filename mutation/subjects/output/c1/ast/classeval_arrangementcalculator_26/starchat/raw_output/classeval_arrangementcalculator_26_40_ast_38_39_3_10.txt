The missing part in the 'factorial' function can be filled with this Python code snippet:

```python
for i in range(1, n + 1):
    result *= i
```

This code block multiplies `result` by each number from 1 to `n`, including `n`, and updates `result` with the product. This process calculates the factorial of `n`.

Here is the complete corrected code:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(1, n + 1):
            result *= i
        return result

```
The above Python code fixes the bug in the 'count_all' function by iterating from 1 to `n + 1` to calculate the factorial. This ensures that the calculation covers all possible cases.