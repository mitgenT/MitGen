Infill the `<MASK>` in your given code with the following:

```python
for r in range(1, m + 1):
    result.extend(list(itertools.permutations(self.datas, r)))
```

So, the entire program becomes:

```python
import itertools

class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        result = []
        if m is None:
            m = len(self.datas)
        for r in range(1, m + 1):
            result.extend(list(itertools.permutations(self.datas, r)))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

This revised `select` method correctly generates permutations for `m` number of elements within the `datas` list. If `m` is not provided, it defaults to selecting all elements. The `select_all` method creates a list of arrangements by choosing all possible numbers of elements. The static methods `count` and `count_all` also work as expected to compute the number of arrangements.