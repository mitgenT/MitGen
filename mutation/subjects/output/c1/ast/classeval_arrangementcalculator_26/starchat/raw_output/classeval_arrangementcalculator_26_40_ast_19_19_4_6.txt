# Fix bug location
In the `count_all` method, we need to iterate over `n` using `range(n+1)` instead of `range(1, n+1)`. 
This is because we're calculating the total count of arrangements for `n` items, not for each individual item from 1 to `n`. 

The correct code is:

```python
@staticmethod
def count_all(n):
    total = 0
    for i in range(n + 1):
        total += ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - i)
    return total
```

So, the entire code becomes:

```python
import itertools

class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(n + 1):
            total += ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

Now the class `ArrangementCalculator` is correctly implemented with the specified functionalities.