Here's the completed code:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

```

In the `count` method, if `m` is not provided or `n` equals `m`, it will return the factorial of `n`. Otherwise, it will calculate the permutation by dividing the factorial of `n` by the factorial of `(n - m)`.
In the `count_all` method, it calculates the total number of arrangements for all possible selections from 1 to `n`.
The `select` method generates a list of arrangements by selecting `m` items from the internal `datas`. If `m` is not provided, it defaults to the length of `datas`.
The `select_all` method generates a list of all possible arrangements by selecting from 1 to the number of `datas`.
The `factorial` method calculates the factorial of a given number using iteration.