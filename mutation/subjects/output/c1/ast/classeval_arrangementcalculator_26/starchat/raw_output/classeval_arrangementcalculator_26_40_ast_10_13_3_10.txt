The given code has a few bugs. We need to fix it first:

- In the `count` method, it should return the result of `factorial(n) // factorial(n - m)` when m is provided, and `factorial(n)` when m is not provided.
- In the `count_all` method, the bug is at the line `total += ArrangementCalculator.count(n, i)`, where the arguments are switched. It should be `total += ArrangementCalculator.count(i, n)`.

Here's the corrected code:

```python
import itertools

class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is not None:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)
        else:
            return ArrangementCalculator.factorial(n)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(i, n)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

This corrected code satisfies all the requirements in the docstring.