To fix the bug location and fill in the <MASK>, I suggest modifying the 'count_all' method. The 'count_all' method calculates the total number of arrangements by choosing at least 1 item and at most n items from n items. It should return the factorial of n plus the summation of factorials from n-1 to 1. The current implementation doesn't meet this requirement.

Below is the corrected code:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 1
        for i in range(1, n + 1):
            total += ArrangementCalculator.factorial(i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

Now the 'count_all' method correctly calculates the total number of arrangements by choosing at least 1 item and at most n items from n items. The <MASK> in the'select' method has also been filled with the'result.append(list(permutation))' line, which appends each permutation to the'result' list.