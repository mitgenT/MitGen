```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None:
            m = n
        return itertools.permutations(range(n), m).__length_hint__()

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

In this solution, `itertools.permutations` function is used to calculate the permutation count. Additionally, to compute total arrangements, we have fixed the bug by adding `.__length_hint__()`. We use Python's built-in `itertools.permutations` function to find all permutations of the given elements in the `select` and `select_all` methods. The `count` and `count_all` methods calculate the permutation counts. The `factorial` method calculates the factorial of a number.