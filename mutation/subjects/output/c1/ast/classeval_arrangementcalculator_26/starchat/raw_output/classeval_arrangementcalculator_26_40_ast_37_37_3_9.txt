The bug in the given code lies in the `count_all()` method. The line where the bug is indicated is where the `ArrangementCalculator.count(n, i)` call should be within a multiplication statement, not an addition statement. Let's fix this and infill the missing part in the `factorial()` method.

Here's the corrected code:

```python
import itertools

class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 1
        for i in range(1, n + 1):
            total *= ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

In the updated code:
- Bug fixed in `count_all()` method. Now, it correctly multiplies the arrangement counts for each length from 1 to n.
- The `factorial()` method calculates the factorial of a given number by initializing a `result` variable to 1 and then iterating from 2 to `n+1` to multiply the `result` by each number.