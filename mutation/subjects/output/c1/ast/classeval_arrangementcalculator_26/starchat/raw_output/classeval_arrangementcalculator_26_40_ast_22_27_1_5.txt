## Fixed code
```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        return list(itertools.permutations(self.datas, m))

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

In the fixed code:
- I've corrected the bug in `count_all()` function where the calculation of total arrangements was incorrect (accumulated the counts instead of summing up).
- Instead of the while-loop in `select()` method, I've replaced it with `itertools.permutations()` to generate all possible arrangements in an efficient manner.
- If m is not provided, I've updated the `select()` method to select all items by default.
- I've replaced the `count()` method's calculation by the direct formula using `factorial()` method, avoiding unnecessary repeated calculations.