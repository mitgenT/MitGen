Here's the corrected code infilling:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None:
            m = n
        return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

```

Changes made:
1. In the `count` method of `ArrangementCalculator`, I replaced `<MASK>` with calculation of permutation (factorial(n) divided by factorial(n-m)), adding functionality for `m` defaulting to `n`.
2. Moved the calculation of `total` in the `count_all` method to inside the for loop as the factorials were being recalculated for each iteration, causing erroneous results.
3. In the `select_all` method, I changed `result.append(list(permutation))` to `result.extend(self.select(i))` to correctly append all permutations, rather than appending individual permutations one by one.