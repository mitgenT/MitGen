The bug location is in the `count_all` method where the addition (+) operator is mistakenly used instead of multiplication (*). Also, the use of the `factorial(n)` method without adding 1 before calculating the factorial, which will cause an off-by-one error. 

Here is the filled in code:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 1
        for i in range(1, n + 1):
            total *= ArrangementCalculator.factorial(i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

```

This program implements an `ArrangementCalculator` class to calculate and provide permutation calculations and selection operations for a given set of data elements. The class has four methods for counting arrangements (`count`, `count_all`), selecting specific arrangements (`select`, `select_all`), and calculating factorials (`factorial`). The `count_all` method has been fixed to use correct mathematical multiplication for factorial calculations.