I have filled in the `<MASK>` in your code and created the `ArrangementCalculator` class correctly. Here is the entire program:

```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for subset in itertools.combinations(self.datas, m):
            result.append(list(subset))
        return result

    def select_all(self):
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

The `select` method uses `itertools.combinations` to generate subsets of the input data of length `m`. If `m` is not provided, the method will select all subsets.

The `select_all` method generates all possible arrangements by calling `select` method for all possible values of `m`.

The `count` method calculates the number of arrangements by choosing `m` items from `n` items (permutations). If `m` is not provided or `n` equals `m`, the method returns `factorial(n)`.

The `count_all` method calculates the total number of all possible arrangements by choosing at least 1 item and at most `n` items from `n` items.

The `factorial` method calculates the factorial of a given number using a loop.