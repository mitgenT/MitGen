## Fixed code:
```python
import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        return list(itertools.chain.from_iterable(itertools.permutations(self.datas, r) for r in range(1, len(self.datas) + 1)))

    @staticmethod
    def factorial(n):
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```

The bug at line `total += ArrangementCalculator.count(n, i)` is fixed by removing the redundant parentheses around `ArrangementCalculator.count(n, i)`. The code now correctly calculates the total number of all arrangements by selecting at least 1 item and at most n items.

In the `select_all` method, the bug has been fixed by using the `itertools.chain.from_iterable` function and a generator expression to efficiently generate a list of all arrangements. The arrangements are generated for each possible length from 1 to the number of internal datas, using `itertools.permutations` for each length.