```python
import itertools

class ArrangementCalculator:
    def __init__(self, datas):
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        if m is not None:
            return itertools.combinations(range(n), m).__len__()
        else:
            return itertools.permutations(range(n)).__len__()

    @staticmethod
    def count_all(n):
        return sum(ArrangementCalculator.count(n, m) for m in range(1, n + 1))

    def select(self, m=None):
        if m is not None:
            return list(itertools.combinations(self.datas, m))
        else:
            return list(itertools.permutations(self.datas))

    def select_all(self):
        return [subset for i in range(1, len(self.datas) + 1) for subset in itertools.combinations(self.datas, i)]

    @staticmethod
    def factorial(n):
        if n == 0:
            return 1
        else:
            return n * ArrangementCalculator.factorial(n-1)
```