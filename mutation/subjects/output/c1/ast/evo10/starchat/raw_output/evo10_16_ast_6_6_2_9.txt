if string == string[::-1]:
```
assistant
```python
def is_palindrome(string: str) -> bool:
    """ 
    Test if given string is a palindrome.
    """

    if string == string[::-1]:
        return True
    else:
        return False


def make_palindrome(string: str) -> str:
    l_string = string.lower()
    if is_palindrome(l_string):
        return string
    else:
        for i in range(len(string)):
            if is_palindrome(l_string[i:]):
                return string + string[:i][::-1]
```
Now the given code correctly uses the `is_palindrome` function to check if a string is a palindrome and forms the shortest palindrome that begins with a supplied string. The algorithm idea is to find the longest postfix of supplied string that is a palindrome considering case insensitivity, append to the end of the string the string prefix that comes before the palindromic suffix, and handle the special case where the string is already a palindrome.

Note that `is_palindrome` function is corrected to return `True` when a string is palindrome and `False` otherwise.