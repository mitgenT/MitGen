Based on the provided docstring, we need to find the longest substring starting with a vowel in each string, and return the substring and its index in the original list. Here's the completed code:

```python
from typing import List, Optional, Tuple

def longest_substring(strings: List[str]) -> Tuple[Optional[str], Optional[int]]:
    def is_vowel(char: str) -> bool:
        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
        return char.lower() in vowels

    longest_sub: Optional[str] = None
    longest_index: Optional[int] = None
    for index, string in enumerate(strings):
        for i in range(len(string)):
            if is_vowel(string[i]):
                substring = string[i:]
                # Check if the current substring is longer than the previous longest or has the same length
                if not longest_sub or (len(substring) > len(longest_sub)):
                    longest_sub = substring
                    longest_index = index
                    # If the substring is of the same length as the current longest,
                    # consider the first occurrence in case of duplicates
                    break  # No need to check further substrings in this string

    return longest_sub, longest_index

# Test cases
print(longest_substring([]))  # (None, None)
print(longest_substring(['apple', 'banana', 'cherry']))  # ('apple', 0)
print(longest_substring(['grape', 'blueberry', 'strawberry']))  # ('blueberry', 1)
```

This code defines a helper function `is_vowel` to check if a character is a vowel. Then it iterates over the list of strings, looking for substrings starting with a vowel. Once a longer substring is found, it updates the `longest_sub` and `longest_index`. If a substring of the same length is encountered, the function stops checking further substrings for that string to adhere to the rule of considering the first occurrence. Finally, the function returns the longest substring and its index.