Based on the given docstring, the function `longest_substring` should iterate through the list, find substrings that start with a vowel, and keep track of the longest one found so far along with its index. Here's the filled-in code:

```python
from typing import List, Optional, Tuple

def longest_substring(strings: List[str]) -> Tuple[Optional[str], Optional[int]]:
    longest_string: Optional[str] = None
    longest_start_index: Optional[int] = None
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}

    for index, string in enumerate(strings):
        for i in range(len(string)):
            # Check if the current character is a vowel
            if string[i].lower() in vowels:
                current_substring = string[i:]

                # Check if the substring is longer than the current longest or equal and comes first
                if longest_string is None or (len(current_substring) > len(longest_string) or (len(current_substring) == len(longest_string) and index < longest_start_index)):
                    longest_string = current_substring
                    longest_start_index = index

    # Return the longest substring and its index or (None, None) if no suitable substring found
    return longest_string, longest_start_index
```

This code defines the function as described in the docstring, iterating over each string in the input list and checking for substrings starting with a vowel. It keeps track of the longest substring and its index using `longest_string` and `longest_start_index`, respectively. If there are no suitable substrings, it returns `(None, None)`.