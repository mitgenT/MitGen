Based on the provided docstring, we need to update the code to store the maximum substring found so far when it's the same length as the current longest substring. Here's the infilled code:

```python
from typing import List, Optional, Tuple
def longest_substring(strings: List[str]) -> Tuple[Optional[str], Optional[int]]:
    vowels = 'aeiouAEIOU'
    longest_substring = None
    longest_substring_index = None
    for i, string in enumerate(strings):
        substrings = [string[j:] for j in range(len(string)) if string[j] in vowels]
        if substrings:
            max_substring = max(substrings, key=len)
            if longest_substring is None or len(max_substring) == len(longest_substring):
                longest_substring = max_substring
                # Add this line to store the index of the string
                if longest_substring_index is None or len(max_substring) == len(longest_substring):
                    longest_substring_index = i
    return longest_substring, longest_substring_index
```