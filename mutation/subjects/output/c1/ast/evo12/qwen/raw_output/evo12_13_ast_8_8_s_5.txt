Based on the provided docstring, we should update the code to check if the current `max_substring` is longer than the existing `longest_substring`, or they have the same length but the current one appears first. Here's the filled-in code:

```python
from typing import List, Optional, Tuple
def longest_substring(strings: List[str]) -> Tuple[Optional[str], Optional[int]]:
    vowels = 'aeiouAEIOU'
    longest_substring = None
    longest_substring_index = None
    for i, string in enumerate(strings):
        substrings = [string[j:] for j in range(len(string)) if string[j] in vowels]
        
        # Check if a new longest substring has been found
        for substring in substrings:
            if not longest_substring or (len(substring) > len(longest_substring) or (
                    len(substring) == len(longest_substring) and i < longest_substring_index)):
                longest_substring = substring
                longest_substring_index = i
    return longest_substring, longest_substring_index
```