from typing import List, Optional, Tuple
def longest_substring(strings: List[str]) -> Tuple[Optional[str], Optional[int]]:
    longest_vowel_substring: str = ""
    longest_vowel_substring_index: int = -1

    for index, string in enumerate(strings):
        for i in range(len(string)):
            # Check if character at index is a vowel (case-insensitive)
            if string[i].lower() in ['a', 'e', 'i', 'o', 'u']:
                current_substring = string[i:]

                # Find the longest substring starting with a vowel
                while i + len(current_substring) < len(string) and \
                        string[i + len(current_substring)].lower() in ['a', 'e', 'i', 'o', 'u']:
                    current_substring += string[i + len(current_substring)]

                # Update longest substring and index if current substring is longer
                if len(current_substring) > len(longest_vowel_substring):
                    longest_vowel_substring = current_substring
                    longest_vowel_substring_index = index

    # Return (None, None) if no substrings start with a vowel or the input list is empty
    if longest_vowel_substring == "":
        return None, None
    else:
        return longest_vowel_substring, longest_vowel_substring_index