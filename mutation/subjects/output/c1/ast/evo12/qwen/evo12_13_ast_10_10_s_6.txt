from typing import List, Optional, Tuple
def longest_substring(strings: List[str]) -> Tuple[Optional[str], Optional[int]]:
    vowels = 'aeiouAEIOU'
    longest_substring = None
    longest_substring_index = None
    for i, string in enumerate(strings):
        substrings = [string[j:] for j in range(len(string)) if string[j] in vowels]
        if substrings:
            max_substring = max(substrings, key=len)
            if longest_substring is not None and len(max_substring) > len(longest_substring):
                # Update longest_substring if a longer substring is found
                longest_substring = max_substring
                # Update longest_substring_index if the new longest substring is from a different string
                longest_substring_index = i if i != longest_substring_index else None
            elif max_substring:
                # Set longest_substring to the first occurrence of a substring starting with a vowel
                longest_substring = max_substring
                # Set longest_substring_index to the index where it was found
                longest_substring_index = i
    return longest_substring, longest_substring_index