
def solve(n: int, c: int, d: int, coins: list[int]) -> int:
    """
    There are n quests. If you complete the i-th quest, you will gain ai coins. You can only complete at most one quest per day. However, once you complete a quest, you cannot do the same quest again for k days. (For example, if k=2 and you do quest 1 on day 1, then you cannot do it on day 2 or 3, but you can do it again on day 4.)

    You are given two integers c and d. Find the maximum value of k such that you can gain at least c coins over d days. If no such k exists, output Impossible. If k can be arbitrarily large, output Infinity.

    Input
    The input consists of multiple test cases. The first line contains an integer t(1<=t<=10^4) - the number of test cases. The description of the test cases follows.

    The first line of each test case contains three integers n,c,d(2<=n<=2⋅10^5; 1<=c<=10^16; 1<=d<=2⋅10^5) - the number of quests, the number of coins you need, and the number of days.

    The second line of each test case contains n integers a1,a2,…,an (1<=ai<=10^9) - the rewards for the quests.

    The sum of n over all test cases does not exceed 2⋅10^5, and the sum of d over all test cases does not exceed 2⋅10^5.

    Output
    For each test case, output one of the following.

    If no such k exists, output Impossible.
    If k can be arbitrarily large, output Infinity.
    Otherwise, output a single integer - the maximum value of k such that you can gain at least c coins over d days. 

    Please note, the checker is case-sensitive, and you should output strings exactly as they are given.
    """
    INF = 1 << 60
    # dp[day][cooldown][done] = max coins
    # day: current day
    # cooldown: current cooldown
    # done: bitmask of completed quests

    dp = [[[-1] * 2 for _ in range(1 << n)] for _ in range(d + 1)]
    dp[d][0][0] = 0

    for day in range(d - 1, -1, -1):
        for cooldown in range(2):
            for done in range(1 << n):
                # do quest
                if cooldown == 0 and dp[day + 1][1][done] != -1:
                    dp[day][0][done] = max(dp[day][0][done], dp[day + 1][1][done] + coins[day % n])

                # skip
                if dp[day + 1][max(cooldown - 1, 0)][done | (1 << day % n)] != -1:
                    dp[day][cooldown][done] = max(dp[day][cooldown][done], dp[day + 1][max(cooldown - 1, 0)][done | (1 << day % n)])

    if dp[0][0][0] >= c:
        return min(max(cooldown for cooldown in range(2) if dp[0][cooldown][0] >= c), INF)
    else:
        return "Impossible"

        
