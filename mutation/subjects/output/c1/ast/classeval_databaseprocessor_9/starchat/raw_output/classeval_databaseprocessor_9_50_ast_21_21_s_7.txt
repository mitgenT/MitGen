## Output

```python
import sqlite3
import pandas as pd


class DatabaseProcessor:

    def __init__(self, database_name):
        self.database_name = database_name
        self.conn = sqlite3.connect(database_name)

    def create_table(self, table_name, key1, key2):
        cursor = self.conn.cursor()
        create_table_query = f"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)"
        cursor.execute(create_table_query)
        self.conn.commit()

    def insert_into_database(self, table_name, data):
        cursor = self.conn.cursor()
        for item in data:
            insert_query = f"INSERT INTO {table_name} (name, age) VALUES (?,?)"
            cursor.execute(insert_query, (item['name'], item['age']))
        self.conn.commit()

    def search_database(self, table_name, name):
        cursor = self.conn.cursor()
        select_query = f"SELECT * FROM {table_name} WHERE name =?"
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()
        return result

    def delete_from_database(self, table_name, name):
        cursor = self.conn.cursor()
        delete_query = f"DELETE FROM {table_name} WHERE name =?"
        cursor.execute(delete_query, (name,))
        self.conn.commit()

    def __del__(self):
        self.conn.close()
```

In this code, the `DatabaseProcessor` class manages a SQLite database with methods to create tables, insert data, search for data by name, and delete data by name. The class utilizes the `sqlite3` module to interact with the database and closes the connection in the destructor to ensure resource cleanup. The `conn` object is initialized in the `__init__` method, and it's used throughout the class methods to interact with the database.