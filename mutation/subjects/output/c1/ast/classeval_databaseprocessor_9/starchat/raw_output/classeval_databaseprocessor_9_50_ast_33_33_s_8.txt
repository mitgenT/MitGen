```python
import sqlite3
import pandas as pd


class DatabaseProcessor:

    def __init__(self, database_name):
        self.database_name = database_name
        conn = sqlite3.connect(self.database_name)
        self.conn = conn

    def create_table(self, table_name, key1, key2):
        cursor = self.conn.cursor()

        create_table_query = f"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)"
        cursor.execute(create_table_query)

        self.conn.commit()
        self.conn.close()

    def insert_into_database(self, table_name, data):
        cursor = self.conn.cursor()

        for item in data:
            insert_query = f"INSERT INTO {table_name} (name, age) VALUES (?,?)"
            cursor.execute(insert_query, (item['name'], item['age']))

        self.conn.commit()
        self.conn.close()

    def search_database(self, table_name, name):
        cursor = self.conn.cursor()

        select_query = f"SELECT * FROM {table_name} WHERE name =?"
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()

        self.conn.close()
        return result

    def delete_from_database(self, table_name, name):
        cursor = self.conn.cursor()

        delete_query = f"DELETE FROM {table_name} WHERE name =?"
        cursor.execute(delete_query, (name,))

        self.conn.commit()
        self.conn.close()
```

In the solution, the database connection is established in the `__init__` method and reused across methods for efficiency. Furthermore, `self.conn.close()` is called after completing the database operations to ensure proper closure of the connection, adhering to good programming practices.