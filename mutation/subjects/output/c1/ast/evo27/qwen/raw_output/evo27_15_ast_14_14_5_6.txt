Based on the provided docstring, we need to check if the current character is lowercase, and if so, we should not change it. We can add a condition to skip changing the character when `i` is equal to `special_index` and the character is lowercase. Here's how the code should look:

```python
def flip_case_special(string: str, special_index: int) -> str:
    special_index %= len(string)
    result = ''
    for i, char in enumerate(string):
        if i == special_index:
            if char.isupper():
                result += char.lower()
            else:
                result += char
        else:
            if char.isupper():
                result += char.lower()
            else:
                # If the character is lowercase and not at the special index, keep it as is
                if not (i == special_index and char.islower()):
                    result += char
    return result
```

Now, the completed code has the logic to handle the requirements described in the docstring.