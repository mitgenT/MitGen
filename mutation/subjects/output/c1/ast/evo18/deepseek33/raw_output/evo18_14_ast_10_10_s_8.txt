To fill the two missing portions, we can add 'result[sub] += count' to increase the count by the number of times the substring is found, and 'count = string[pos:].count(sub)' to get the count of occurrences of the substring in the string starting from the current position. 

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                count = string[pos:].count(sub)
                result[sub] += count
                start = pos + 1
            else:
                break
    return result
```
