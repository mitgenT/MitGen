## Output

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += 1
                start = pos + 1
            else:
                if start < len(string) and pos == -1:
                    break
    return result
```

The infill of the <MASK> in the code is: 
if start < len(string) and pos == -1:
                    break

This is used to ensure that the while loop continues until the end of the string is reached or a non-matching substring is found. In Python, find() function returns -1 when it doesn't find any match. So if pos is -1 (i.e., substring not found), it means that the substring doesn't exist in the remaining part of the string, so it breaks the loop.
