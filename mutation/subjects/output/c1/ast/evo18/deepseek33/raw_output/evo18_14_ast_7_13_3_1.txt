The problem statement suggests infilling two code blocks, one for each given code example. The code to be infilled is the part that is marked with <MASK> in the given code examples. 

Given the problem description and the context of the given code, here's the infilled version:

## Example solution for the first given code:
```Python
def program(list1):  
    '''
    This program implements a bubble-sortã€‚
    '''
    for i in range(0,len(list1)-1):  
        for j in range(len(list1)-1):  
            if(list1[j]>list1[j+1]):  
                temp = list1[j]  
                list1[j] = list1[j+1]
                list1[j+1] = temp  
    return list1  
```

## Example solution for the second given code:
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string):
            pos = string.find(sub, start)
            if pos != -1:
                start = pos + 1
                result[sub] += 1
            else:
                break
    return result
```
The 'start' variable in the second infilled block is responsible for finding each occurrence of the substring in the string. The while loop continues to the end of the string until it no longer finds the substring. For each occurrence, it increments the corresponding count in the 'result' dictionary.
