## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += 1
                start = pos + 1
            else:
                if start < len(string) - 1:
                    start += 1
    return result
```

In this code, we first check if any substring is empty. If it is, we return a message "Substrings cannot be empty". Then, for each substring, we search in the string from the current starting index to the end. If we find a match, we increase the count for that substring and move the start index to the position after the found substring. If we do not find a match, we check if the start index is still less than the length of the string minus 1. If it is, we increase the start index by 1. This continues until we have checked every substring in the string. The function then returns the dictionary with the counts for each substring.
