The answer to this question is as follows:

## Code
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += 1
                start = pos + 1
            else:
                if start < len(string):
                    start += 1
    return result
```

The '<MASK>' symbols in the provided code were infilled with a 'if start < len(string):' condition and 'start += 1' for the next iteration. This condition checks if 'start' is less than the length of the string and if it is not, increment 'start' by 1 to move the starting index of the next search. Without these conditions, it would cause an infinite loop because 'find' method would keep returning -1 even if all the substrings have been found.
