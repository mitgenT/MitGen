## Output code:
```Python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while True:
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += string.count(sub)
                start = pos + 1
            else:
                break
    return result
```

This program uses a nested loop to check each substring against each character in the original string. The `find` method is used to find the start index of the substring within the string. If a valid start index is found, the count is updated by adding the number of times the substring occurs in the string. If not, the loop breaks. The `count` method is used to find the number of occurrences of a substring in the original string. The `start` variable is updated to avoid overlap between substrings. The function `any` is used to check if any substring is an empty string.
