Based on the provided docstring, it seems we need to check if the substring `sub` appears at the current position `start` within the `string`. If it does, increment the count and update the `start` position for the next occurrence. Since we're looking for overlapping cases, we should continue searching after finding a match. Here's how the code should be filled:

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            if string[start:start+len(sub)] == sub:
                result[sub] += 1
                start += len(sub)
            else:
                break
    return result
```

Now the `<MASK>` sections have been replaced with appropriate code to find overlapping occurrences of the substrings in the input string.