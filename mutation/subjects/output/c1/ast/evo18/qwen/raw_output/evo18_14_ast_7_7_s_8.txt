Based on the provided docstring, we need to check if the `sub` matches the `string` and increment the count in the `result` dictionary. Since we're looking for overlapping occurrences, we need to update the `start` variable to continue searching after finding a match. Here's how to fill in the `<MASK>`:

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        if sub in string:
            while True:
                pos = string.find(sub, start)
                if pos != -1:
                    result[sub] += 1
                    start = pos + 1
                else:
                    break
        else:
            break
    return result
```

Now, the `how_many_times` function will correctly count overlapping occurrences of substrings in the given string.