Based on the provided docstring, we need to count the occurrences of each substring and update the dictionary accordingly. Here's the filled-in code:

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - len(sub) + 1:  # Adjust the loop condition to avoid `string.find` from going out of bounds
            pos = string.find(sub, start)
            if pos != -1:
                result[sub] += 1
                start = pos + 1  # Increment the start position to check for overlapping occurrences
            else:
                break
    return result
```

In this code, we have replaced `<MASK>` with the appropriate logic to increment the count in `result` dictionary when a substring is found and move to the next possible starting position for overlapping checks.