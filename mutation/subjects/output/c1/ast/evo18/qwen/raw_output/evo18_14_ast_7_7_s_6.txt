Here's the infilled code:

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while True:
            pos = string.find(sub, start)
            if pos == -1:
                break
            result[sub] += 1
            start = pos + 1
    return result
```

The changes made are:
1. Replaced `<MASK>` with `while True:` to indicate an infinite loop that will continue searching for the substring as long as it's found.
2. Inside the loop, replaced `<MASK>` with `result[sub] += 1` to increment the count for each occurrence.
3. Changed the `else` clause after `if pos != -1:` to remove it, since we don't need to check for an empty string condition inside the main loop. We handle the empty string case at the beginning of the function.