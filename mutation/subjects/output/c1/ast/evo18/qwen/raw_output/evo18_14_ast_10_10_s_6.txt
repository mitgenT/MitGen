Here's the infilled code:

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos != -1:
                if pos + len(sub) <= len(string):
                    result[sub] += 1
                    start = pos + 1
                else:
                    break
            else:
                break
    return result
```

Explanation:
- We add the condition `if pos + len(sub) <= len(string):` to check if there's no overlap by ensuring the next occurrence doesn't go beyond the string length.
- If it's not overlapping, we increment the count for the substring in the `result` dictionary using `result[sub] += 1`.
- If it's overlapping, we still increment the count but don't update the `start` position since the current match is part of the previous occurrence.