Based on the provided docstring, it seems that the function is meant to find overlapping occurrences of each substring in the input string. The `find` method returns the index of the first occurrence of the substring, so we need to increment the start position to check for subsequent occurrences within the remaining string. Here's how to fill in the `<MASK>` parts:

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - len(sub) + 1:  # Adjust the loop condition to avoid out-of-bounds
            pos = string.find(sub, start)
            if pos != -1:  # `find` returns -1 if not found
                string = string[:pos] + string[pos+len(sub):]  # Shift the string to exclude the found substring
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
```

This updated code correctly handles overlapping occurrences of substrings in the input string and increments the counts accordingly.