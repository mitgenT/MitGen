## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            else:
                if start == 0:
                    break
    return result
```

In this example, we modified the loop condition to `start < len(string) - 1` to prevent going beyond the string boundary. We also added a break statement inside the else block to stop the loop if no more substring is found. This ensures that overlapping cases are also counted correctly.