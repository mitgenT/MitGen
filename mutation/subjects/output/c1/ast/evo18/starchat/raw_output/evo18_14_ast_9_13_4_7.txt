## Output

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:  # If substring is found
                result[sub] += 1
                start = pos + len(sub)  # Move start to the next position after the found substring
            else:
                break  # Break the loop if substring is not found
    return result
```

This revised version of the code successfully addresses the overlapping substring counting issue by updating the `start` position after each found substring. If the substring is not found in the rest of the string, the loop breaks to avoid unnecessary iterations.