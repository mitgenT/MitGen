## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while True:
            start = string.find(sub, start)
            if start == -1:
                break
            else:
                result[sub] += 1
                start += 1
    return result

```

This version of the function will look for each substring in the given string and increase its count every time it finds a match, even if the substrings overlap.

It uses Python's built-in `find()` function to locate substrings, starting from the current search start index. This continues until `find()` returns -1, indicating no more matches. For each match, it increments the corresponding count in the result dictionary and advances the search start index.

This way, the function will handle both overlapping and non-overlapping cases, following the requirements of the docstring.