## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                if pos < len(string) - len(sub):
                    result[sub] += 1
                start = pos + 1
            else:
                break
    return result
```
The corrected code should iterate through each substring within the original string, and count only when the position of the substring is less than the length of the remaining original string after the current start position, thereby accurately considering overlapping cases.