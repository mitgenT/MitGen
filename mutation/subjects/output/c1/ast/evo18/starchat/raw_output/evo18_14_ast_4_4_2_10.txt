## Output

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    if string == '':
        return result
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
```
Infilling `<MASK>` in the code above is done by initializing an empty dictionary `result` with keys as the substrings and values as zeros. Then it checks if the input string is empty and returns a dictionary with zero counts for each substring if it is. Finally, it iterates through each substring, using string's `find()` method to search for overlapping occurrences and updates the counts in `result` accordingly.