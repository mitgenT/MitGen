## Output

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    if string == '':
        result = {sub: 0 for sub in substrings}
    else:
        result = {sub: string.count(sub) for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
```

In the given code, the `<MASK>` has been replaced in such a way that it first checks if the input string is empty. If it is, then it creates a dictionary `result` with the substrings as keys and their counts as zero.

If the input string is not empty, then it creates a dictionary `result` with the substrings as keys and their counts in the string using the `count` function.

Finally, the code iterates over each substring, finds its positions in the input string, and increments its count in the `result` dictionary accordingly. This takes care of overlapping cases as well.