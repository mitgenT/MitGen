## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
    return result
```

In this revised code, I've added the condition `pos!= -1` inside the while loop. If the substring is found at the position indicated by `pos`, the function increases the count for that substring in the result dictionary and moves the start position to the next position after the found substring to check for overlapping cases.