## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                start = pos + 1
                result[sub] += 1
            else:
                break
    return result
```

Here, I filled `<MASK>` by adding a condition (`pos!= -1`) inside the inner loop to only increase the count and update the start position when the substring is found in the original string. If the substring is not found, the loop breaks. This ensures that overlapping cases are counted correctly.