```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(not sub for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - len(sub) + 1:
            if string[start:start+len(sub)] == sub:
                result[sub] += 1
                start += len(sub)
            else:
                start += 1
    return result
```

This solution checks if any of the substrings is empty first. If so, it returns an error message. It then initializes a dictionary `result` to store the count of each substring, and iterates through each substring to find its occurrences in the original string. If a substring is found, it increments its count in the dictionary and moves the search start position to the next possible match position. The search continues until no more matches are found for each substring. Finally, it returns the `result` dictionary.