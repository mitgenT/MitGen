## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            if pos + len(sub) > len(string):
                break
    return result
```

In the solution, the <MASK> part has been replaced with a condition to check if the position of the found substring plus its length exceeds the length of the string. This breaks the inner loop when no more occurrences of the substring can be found within the remaining part of the string, ensuring that overlapping cases are counted correctly.