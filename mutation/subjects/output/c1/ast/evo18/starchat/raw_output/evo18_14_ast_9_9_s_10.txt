```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - len(sub) + 1:  # Correcting the range check
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
```
In this corrected program, we are finding each substring in the main string by iterating over a window of length of substring in the main string. The starting position of this window is increased whenever a match is found. We break the loop when there is no match anymore. The counts are updated in the dictionary `result` for each matched substring. Finally, the dictionary `result` is returned as output.