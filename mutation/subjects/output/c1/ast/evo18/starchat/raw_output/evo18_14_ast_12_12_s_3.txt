## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
```
The main difference between this and the original code is the handling of the case when a substring is not found (`pos == -1`). In the original code, the `break` statement would be executed immediately after the `if` condition is checked, resulting in not incrementing `start` and potentially going into an infinite loop. To fix this, I added an `else` clause to the `while` loop, which is only executed when no more occurrences of the substring are found. In that case, the loop is broken, preventing the infinite loop.