## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - len(sub) + 1:  # Addition of 'len(sub) - 1' to correctly handle overlapping cases
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1  # Increase the count for the found substring
                start = pos + len(sub)  # Update the start position considering overlapping cases
            else:
                break
    return result
```

In the given solution, <MASK> is replaced with the condition `start < len(string) - len(sub) + 1` to handle overlapping cases in the string. The count of each substring is increased by 1 and the start position is updated by `len(sub)` to continue searching for overlapping occurrences.