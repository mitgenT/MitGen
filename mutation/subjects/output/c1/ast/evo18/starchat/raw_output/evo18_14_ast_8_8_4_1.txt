## Output

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
```

In the given code, `<MASK>` was replaced with the use of `string.find(sub, start)`. This function searches for the occurrence of the substring `sub` in `string` starting from index `start` and returns the lowest index of the found substring. This is used to implement overlapping substring matching by updating `start` to `pos + 1` when a match is found.
This program efficiently counts the number of times each substring appears in the original string, considering overlapping cases.