## Output

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + len(sub)
            else:
                break
    return result
```

In the given code, `<MASK>` is replaced by the condition `pos!= -1` and `start = pos + len(sub)`. The condition checks if the substring is found in the string at the current position. If found, the count of the substring is increased and the starting position is updated to search for the next occurrence of the substring. Otherwise, the loop breaks as the substring cannot be found anymore.