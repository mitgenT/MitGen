## Output

```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        if string:
            while True:
                pos = string.find(sub, start)
                if pos!= -1:
                    result[sub] += 1
                    start = pos + 1
                else:
                    break
    return result
```

In the solution, I replaced `<MASK>` with `string` (if statement) and used a while loop to find the positions of the substring in the string until it's not found. This handles overlapping cases correctly. The counts for each substring are updated in the `result` dictionary accordingly. If an empty string is encountered, the function returns "Substrings cannot be empty".