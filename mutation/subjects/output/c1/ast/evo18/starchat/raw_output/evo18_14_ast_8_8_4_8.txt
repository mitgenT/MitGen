## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - len(sub) + 1:
            if string[start:start+len(sub)] == sub:
                pos = start
            else:
                pos = -1
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            else:
                break
    return result
```
In the solution, the `while` loop has been adjusted to check for overlapping cases when `start` is increased by the length of the substring instead of 1. The comparison for finding the substring in the original string has been changed to using string slicing with `start:start+len(sub)`. Finally, the `pos` variable is not defined, so I have defined it and set its value based on the comparison.