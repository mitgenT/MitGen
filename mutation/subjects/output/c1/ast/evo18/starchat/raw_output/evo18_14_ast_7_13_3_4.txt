## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string):
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1  # Move the start position to find overlapping cases
            else:
                break
    return result

```

This solution iterates through the string to find each substring, updating its count in the `result` dictionary. The `start` variable tracks the position in the string to begin searching for the substring, allowing overlapping cases to be counted. The search for each substring begins again from the position right after the last found instance to cover all occurrences.