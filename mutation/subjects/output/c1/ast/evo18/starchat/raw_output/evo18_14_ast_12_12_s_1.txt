## Output
```python
def how_many_times(string: str, substrings: list) -> dict:
    if any(sub == '' for sub in substrings):
        return "Substrings cannot be empty"
    result = {sub: 0 for sub in substrings}
    for sub in substrings:
        start = 0
        while start < len(string) - 1:
            pos = string.find(sub, start)
            if pos!= -1:
                result[sub] += 1
                start = pos + 1
            if pos == -1:
                break
    return result
```

The <MASK> parts in the given code are replaced with:

- `if pos == -1: break` - This line breaks the inner while loop if a substring is not found in the string anymore, preventing unnecessary iterations.

This makes the code implementation more efficient by avoiding unnecessary iterations once a substring is not found in the remaining part of the string. It also correctly implements the requirement to count overlapping cases in the string.