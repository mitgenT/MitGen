## Output
```python
from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    n = len(string)
    pairs = []
    for i in range(min_length, n - 1):
        for j in range(i + min_length, n):
            if len(set(string[:i]).intersection(set(string[j:]))) == 0:
                pairs.append((string[:i], string[j:]))
    pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))
    return pairs
```

In this example, I completed the nested loop by adding another loop (`for j in range(i + min_length, n):`) for creating suffix pairs that do not overlap and meet the minimum length requirement. The condition `if len(set(string[:i]).intersection(set(string[j:]))) == 0` ensures that the prefix and suffix do not share common characters. The resulting pairs are then sorted based on the specified criteria, namely increasing order of their lengths and lexicographical order.