```python
from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    n = len(string)
    pairs = []
    if n < 2 * min_length:
        return pairs
    for i in range(min_length, n - 1):
        for j in range(i, n + 1 - min_length):
            if len(set(string[:i]).intersection(set(string[j:]))) == 0:
                pairs.append((string[:i], string[j:]))
    pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))
    return pairs
```
I first determined that the minimum length of prefixes and suffixes needed was at least'min_length' characters, so I added a condition in the given function to return an empty list if 'n' is less than '2 * min_length'. After that, I used nested loops to generate all possible pairs of prefixes and suffixes with lengths at least'min_length'. Then, I used the `set.intersection()` function to check whether any character of the prefix appears in the suffix. If no overlap is found, the pair was appended to the list. Finally, the list of pairs was sorted using a lambda function as the key to sort it in increasing order of their lengths and lexicographically if their lengths are equal.