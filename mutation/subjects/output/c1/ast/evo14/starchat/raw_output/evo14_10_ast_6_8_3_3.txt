```python
from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    n = len(string)
    pairs = []
    for i in range(min_length, n - 1):
        if string[i] == string[0]:
            for j in range(i+1, n):
                if string[-(j-i):] == string[:j-i]:
                    pairs.append((string[:i+1], string[i+1:]))
                    break
    pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))
    return pairs
```
I added two inner loops inside the main loop to check each potential prefix-suffix pair. This checks if the current character matches the first character of the input string and if the last substring from the current position to the end of the string is equal to the first substring of the same length starting from the beginning of the string. If a pair is found, it is added to the `pairs` list and the inner loop breaks. The final list of pairs is then sorted based on the sum of their lengths and lexicographically if they have the same length.