```python
from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    n = len(string)
    pairs = []
    if min_length <= n - 1:  # Added condition check
        for i in range(min_length, n - 1):
            for j in range(i, n + 1 - min_length):
                if len(set(string[:i]).intersection(set(string[j:]))) == 0:
                    pairs.append((string[:i], string[j:]))
        pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))
    return pairs
```

I added a condition check before entering the inner loop to ensure that the prefix and suffix lengths are at least'min_length' characters long. Then, if the intersection of prefix and suffix sets is empty, it appends the prefix-suffix pair to the 'pairs' list. Finally, it sorts the 'pairs' list based on length and lexicographical order, and returns it.