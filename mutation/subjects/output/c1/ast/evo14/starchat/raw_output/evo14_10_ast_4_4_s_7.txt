## Output
```python
from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    n = len(string)
    pairs = []
    if min_length <= 0:
        return pairs
    for i in range(min_length, n - 1):
        for j in range(i, n + 1 - min_length):
            if len(set(string[:i]).intersection(set(string[j:]))) == 0:
                pairs.append((string[:i], string[j:]))
    pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))
    return pairs
```
In this solution, I added the missing checks and loop conditions required to satisfy the given docstring. The new code verifies that `min_length` is greater than or equal to 1 before processing the string. The pairs are then sorted based on their lengths and lexicographically using a lambda function in the `sort()` method.