## Output
```python
from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    n = len(string)
    pairs = []
    for i in range(min_length, n - 1):
        for j in range(i, n + 1 - min_length):
            if len(set(string[:i]).intersection(set(string[j:]))) == 0:
                if (len(pairs) == 0) or (len(pairs[-1][0]) + len(pairs[-1][1]) < len(string[i:j]) + len(string[:i])) or (len(pairs[-1][0]) + len(pairs[-1][1]) == len(string[i:j]) + len(string[:i]) and string[i:j] + string[:i] < pairs[-1][0] + pairs[-1][1]):
                    pairs.append((string[i:j], string[:i]))
    pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))
    return pairs
```

In the modified code, I added an 'if' condition inside the nested loop. This condition checks if the current pair (prefix, suffix) is lexicographically smaller or equal in length but lexicographically larger in value compared to the previous pair in the 'pairs' list, then the current pair is appended to the 'pairs' list. If no previous pair exists or a new smaller or equal pair is found, the pair is always appended. This condition ensures that the prefix and suffix in each pair are sorted in increasing order of their lengths. If two pairs have equal length, they are sorted lexicographically.