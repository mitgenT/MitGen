Based on the given docstring, the code should find all non-overlapping prefix-suffix pairs that are at least `min_length` characters long and sort them. Here's how you can fill in `<MASK>`:

```python
from typing import List, Tuple
def all_prefix_suffix_pairs(string: str, min_length: int) -> List[Tuple[str, str]]:
    n = len(string)
    if n < min_length * 2:
        # No valid prefix-suffix pairs can be found if the string is too short
        return []
    
    pairs = []  # Initialize an empty list to store the pairs
    
    for i in range(min_length, n - 1):
        for j in range(i, n + 1 - min_length):
            if len(set(string[:i]).intersection(set(string[j:]))) == 0:
                pairs.append((string[:i], string[j:]))
                
    pairs.sort(key=lambda x: (len(x[0]) + len(x[1]), x))  # Sort by length and lexicographically
    return pairs
```

The code checks if the string's length is less than twice the `min_length`, in which case it returns an empty list because no valid prefix-suffix pairs can be formed. Otherwise, it proceeds to find and store the valid pairs, then sorts them as described in the docstring.