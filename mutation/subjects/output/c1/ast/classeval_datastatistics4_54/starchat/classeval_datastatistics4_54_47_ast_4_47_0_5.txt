import math

class DataStatistics4:
    @staticmethod
    def correlation_coefficient(data1, data2):
        """
        Calculate the correlation coefficient of two sets of data.
        :param data1: The first set of data,list.
        :param data2: The second set of data,list.
        :return: The correlation coefficient, float.
        >>> DataStatistics4.correlation_coefficient([1, 2, 3], [4, 5, 6])
        0.9999999999999998
        """
        n = len(data1)
        mean1, mean2 = sum(data1) / n, sum(data2) / n
        sum1 = sum((xi - mean1) * (yi - mean2) for xi, yi in zip(data1, data2))
        std_dev1 = math.sqrt(sum((xi - mean1) ** 2 for xi in data1) / n)
        std_dev2 = math.sqrt(sum((yi - mean2) ** 2 for yi in data2) / n)
        correlation_coefficient = sum1 / (n * std_dev1 * std_dev2)
        return correlation_coefficient
    @staticmethod
    def skewness(data):
        """
        Calculate the skewness of a set of data.
        :param data: The input data list, list.
        :return: The skewness, float.
        >>> DataStatistics4.skewness([1, 2, 5])
        2.3760224064818463
        """
        n = len(data)
        mean = sum(data) / n
        variance = sum((xi - mean) ** 2 for xi in data) / n
        standard_deviation = math.sqrt(variance)
        skewness_sum = sum((xi - mean) ** 3 for xi in data) / (n * variance * standard_deviation)
        skewness = skewness_sum
        return skewness
    @staticmethod
    def kurtosis(data):
        """
        Calculate the kurtosis of a set of data.
        :param data: The input data list, list.
        :return: The kurtosis, float.
        >>> DataStatistics4.kurtosis([1, 20,100])
        -1.5000000000000007
        """
        n = len(data)
        mean = sum(data) / n
        variance = sum((xi - mean) ** 2 for xi in data) / n
        standard_deviation = math.sqrt(variance)
        excess_kurtosis_sum = sum((xi - mean) ** 4 for xi in data) / (n * variance ** 2)
        kurtosis = excess_kurtosis_sum - 3
        return kurtosis
    @staticmethod
    def pdf(data, mu, sigma):
        """
        Calculate the probability density function (PDF) of a set of data under a normal distribution.
        :param data: The input data list, list.
        :param mu: The mean of the normal distribution, float.
        :param sigma: The standard deviation of the normal distribution, float.
        :return: The probability density function (PDF), list.
        >>> DataStatistics4.pdf([1, 2, 3], 1, 1)
        [0.3989422804014327, 0.24197072451914337, 0.05399096651318806]
        """
        pdf = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-((xi - mu) ** 2) / (2 * sigma ** 2)) for xi in data]
        return pdf