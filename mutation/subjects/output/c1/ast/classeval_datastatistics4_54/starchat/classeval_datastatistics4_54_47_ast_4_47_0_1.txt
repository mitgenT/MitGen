import math

class DataStatistics4:
    @staticmethod
    def correlation_coefficient(data1, data2):
        """
        Calculate the correlation coefficient of two sets of data.
        :param data1: The first set of data,list.
        :param data2: The second set of data,list.
        :return: The correlation coefficient, float.
        >>> DataStatistics4.correlation_coefficient([1, 2, 3], [4, 5, 6])
        0.9999999999999998
        """
        n = len(data1)
        sum1 = sum(data1)
        sum2 = sum(data2)
        sum1_sq = sum([i**2 for i in data1])
        sum2_sq = sum([i**2 for i in data2])
        p_sum = sum([i*j for i,j in zip(data1, data2)])
        numerator = n*p_sum - sum1*sum2
        denominator = math.sqrt((n*sum1_sq - sum1**2)*(n*sum2_sq - sum2**2))
        if denominator!= 0:
            return numerator / denominator
        else:
            return 0
    @staticmethod
    def skewness(data):
        """
        Calculate the skewness of a set of data.
        :param data: The input data list, list.
        :return: The skewness, float.
        >>> DataStatistics4.skewness([1, 2, 5])
        2.3760224064818463
        """
        n = len(data)
        mean = sum(data) / n
        stdev = math.sqrt(sum([(i-mean)**2 for i in data]) / n)
        cubed_std = stdev ** 3
        skewness = sum([(i - mean)**3 for i in data]) * (n / ((n - 1) * (n - 2) * cubed_std)) if cubed_std!= 0 else 0
        return skewness
    @staticmethod
    def kurtosis(data):
        """
        Calculate the kurtosis of a set of data.
        :param data: The input data list, list.
        :return: The kurtosis, float.
        >>> DataStatistics4.kurtosis([1, 20,100])
        -1.5000000000000007
        """
        n = len(data)
        mean = sum(data) / n
        stdev = math.sqrt(sum([(i-mean)**2 for i in data]) / n)
        fourth_moment = sum([(i - mean)**4 for i in data]) / n
        kurtosis = (fourth_moment / (stdev ** 4)) - 3
        return kurtosis
    @staticmethod
    def pdf(data, mu, sigma):
        """
        Calculate the probability density function (PDF) of a set of data under a normal distribution.
        :param data: The input data list, list.
        :param mu: The mean of the normal distribution, float.
        :param sigma: The standard deviation of the normal distribution, float.
        :return: The probability density function (PDF), list.
        >>> DataStatistics4.pdf([1, 2, 3], 1, 1)
        [0.3989422804014327, 0.24197072451914337, 0.05399096651318806]
        """
        var = float(sigma) ** 2
        pdf_values = [(1 / (math.sqrt(2 * math.pi * var))) * math.exp(-((x - mu) ** 2) / (2 * var)) for x in data]
        return pdf_values