## Output
```python
import math

class DataStatistics4:

    @staticmethod
    def correlation_coefficient(data1, data2):
        """
        Calculate the correlation coefficient of two sets of data.
        :param data1: The first set of data, list.
        :param data2: The second set of data, list.
        :return: The correlation coefficient, float.
        >>> DataStatistics4.correlation_coefficient([1, 2, 3], [4, 5, 6])
        0.9999999999999998
        """
        n = len(data1)
        x_mean = sum(data1) / n
        y_mean = sum(data2) / n
        numerator = sum((data1[i] - x_mean) * (data2[i] - y_mean) for i in range(n))
        denominator = math.sqrt(sum((xi - x_mean)**2 for xi in data1) * sum((yi - y_mean)**2 for yi in data2))
        return numerator / denominator if denominator!= 0 else 0

    @staticmethod
    def skewness(data):
        """
        Calculate the skewness of a set of data.
        :param data: The input data list, list.
        :return: The skewness, float.
        >>> DataStatistics4.skewness([1, 2, 5])
        2.3760224064818463
        """
        n = len(data)
        x_mean = sum(data) / n
        stdev = math.sqrt(sum((x - x_mean)**2 for x in data) / n)
        m_3 = sum((x - x_mean)**3 for x in data) / n
        skewness = m_3 / stdev**3
        return skewness

    @staticmethod
    def kurtosis(data):
        """
        Calculate the kurtosis of a set of data.
        :param data: The input data list, list.
        :return: The kurtosis, float.
        >>> DataStatistics4.kurtosis([1, 20,100])
        -1.5000000000000007
        """
        n = len(data)
        x_mean = sum(data) / n
        stdev = math.sqrt(sum((x - x_mean)**2 for x in data) / n)
        m_4 = sum((x - x_mean)**4 for x in data) / n
        kurtosis = m_4 / stdev**4 - 3
        return kurtosis

    @staticmethod
    def pdf(data, mu, sigma):
        """
        Calculate the probability density function (PDF) of a set of data under a normal distribution.
        :param data: The input data list, list.
        :param mu: The mean of the normal distribution, float.
        :param sigma: The standard deviation of the normal distribution, float.
        :return: The probability density function (PDF), list.
        >>> DataStatistics4.pdf([1, 2, 3], 1, 1)
        [0.3989422804014327, 0.24197072451914337, 0.05399096651318806]
        """
        z_scores = [(x - mu) / sigma for x in data]
        pdf_values = [math.exp(-0.5 * z**2) / (sigma * math.sqrt(2 * math.pi)) for z in z_scores]
        return pdf_values
```