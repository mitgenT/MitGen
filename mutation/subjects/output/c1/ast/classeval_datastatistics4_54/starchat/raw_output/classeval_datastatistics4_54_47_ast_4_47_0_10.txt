```python
import math

class DataStatistics4:

    @staticmethod
    def correlation_coefficient(data1, data2):
        """
        Calculate the correlation coefficient of two sets of data.
        :param data1: The first set of data, list.
        :param data2: The second set of data, list.
        :return: The correlation coefficient, float.
        >>> DataStatistics4.correlation_coefficient([1, 2, 3], [4, 5, 6])
        0.9999999999999998

        """
        return (sum((data1[i]-sum(data1)/len(data1))*(data2[i]-sum(data2)/len(data2)) for i in range(len(data1))) / 
                ((len(data1)-1)*math.sqrt(sum((x - sum(data1)/len(data1))**2 for x in data1)*sum((y - sum(data2)/len(data2))**2 for y in data2))))

    @staticmethod
    def skewness(data):
        """
        Calculate the skewness of a set of data.
        :param data: The input data list, list.
        :return: The skewness, float.
        >>> DataStatistics4.skewness([1, 2, 5])
        2.3760224064818463

        """
        n = len(data)
        m1 = sum(data) / n
        m2 = sum((x - m1) ** 2 for x in data) / n
        m3 = sum((x - m1) ** 3 for x in data) / n
        skewness = m3 / (m2 ** (3 / 2))
        return skewness

    @staticmethod
    def kurtosis(data):
        """
        Calculate the kurtosis of a set of data.
        :param data: The input data list, list.
        :return: The kurtosis, float.
        >>> DataStatistics4.kurtosis([1, 20,100])
        -1.5000000000000007

        """
        n = len(data)
        m1 = sum(data) / n
        m2 = sum((x - m1) ** 2 for x in data) / n
        m4 = sum((x - m1) ** 4 for x in data) / n
        kurtosis = m4 / (m2 ** 2) - 3
        return kurtosis

    @staticmethod
    def pdf(data, mu, sigma):
        """
        Calculate the probability density function (PDF) of a set of data under a normal distribution.
        :param data: The input data list, list.
        :param mu: The mean of the normal distribution, float.
        :param sigma: The standard deviation of the normal distribution, float.
        :return: The probability density function (PDF), list.
        >>> DataStatistics4.pdf([1, 2, 3], 1, 1)
        [0.3989422804014327, 0.24197072451914337, 0.05399096651318806]

        """
        return [1/(sigma * math.sqrt(2 * math.pi)) * math.exp( -1/2 * ((x - mu) / sigma)**2 ) for x in data]
```