## Output
```python
import math

class DataStatistics4:
    @staticmethod
    def correlation_coefficient(data1, data2):
        """
        Calculate the correlation coefficient of two sets of data.
        :param data1: The first set of data,list.
        :param data2: The second set of data,list.
        :return: The correlation coefficient, float.
        >>> DataStatistics4.correlation_coefficient([1, 2, 3], [4, 5, 6])
        0.9999999999999998

        """
        N = len(data1)
        if N!= len(data2):
            raise ValueError("Both data sets must have the same length.")
        mean1, mean2 = sum(data1) / N, sum(data2) / N
        variance1 = sum((x - mean1) ** 2 for x in data1) / N
        variance2 = sum((x - mean2) ** 2 for x in data2) / N
        covariance = sum((x - mean1) * (y - mean2) for x, y in zip(data1, data2)) / N
        return covariance / (math.sqrt(variance1) * math.sqrt(variance2))

    @staticmethod
    def skewness(data):
        """
        Calculate the skewness of a set of data.
        :param data: The input data list, list.
        :return: The skewness, float.
        >>> DataStatistics4.skewness([1, 2, 5])
        2.3760224064818463

        """
        N = len(data)
        mean = sum(data) / N
        stdev = math.sqrt(sum((x - mean) ** 2 for x in data) / N)
        cube_diff = sum((x - mean) ** 3 for x in data) / N
        return (cube_diff / (N * (stdev ** 3))) if stdev!= 0 else 0

    @staticmethod
    def kurtosis(data):
        """
        Calculate the kurtosis of a set of data.
        :param data: The input data list, list.
        :return: The kurtosis, float.
        >>> DataStatistics4.kurtosis([1, 20,100])
        -1.5000000000000007

        """
        N = len(data)
        mean = sum(data) / N
        variance = sum((x - mean) ** 2 for x in data) / N
        fourth_diff = sum((x - mean) ** 4 for x in data) / N
        return (fourth_diff / (variance ** 2)) - 3

    @staticmethod
    def pdf(data, mu, sigma):
        """
        Calculate the probability density function (PDF) of a set of data under a normal distribution.
        :param data: The input data list, list.
        :param mu: The mean of the normal distribution, float.
        :param sigma: The standard deviation of the normal distribution, float.
        :return: The probability density function (PDF), list.
        >>> DataStatistics4.pdf([1, 2, 3], 1, 1)
        [0.3989422804014327, 0.24197072451914337, 0.05399096651318806]

        """
        return [(1 / (math.sqrt(2 * math.pi) * sigma)) * math.exp(-(x - mu) ** 2 / (2 * sigma ** 2)) for x in data]
```

Infilled all the `MASK` areas as per the given docstring and the requirements mentioned in the docstring comments.