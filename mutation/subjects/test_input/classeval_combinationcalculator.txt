import unittest
import inspect


<generated_code_here>


class CombinationCalculatorTestCount(unittest.TestCase):
    def test_count(self):
        return CombinationCalculator.count(4, 2)
    def test_count_2(self):
        return CombinationCalculator.count(5, 3)

    def test_count_3(self):
        return CombinationCalculator.count(6, 6)

    def test_count_4(self):
        return CombinationCalculator.count(6, 0)

    def test_count_5(self):
        return CombinationCalculator.count(6, 3)

class CombinationCalculatorTestCountAll(unittest.TestCase):
    def test_count_all(self):
        return CombinationCalculator.count_all(4)

    def test_count_all_2(self):
        return CombinationCalculator.count_all(-1)

    def test_count_all_3(self):
        return CombinationCalculator.count_all(65)

    def test_count_all_4(self):
        return CombinationCalculator.count_all(0)

    def test_count_all_5(self):
        return CombinationCalculator.count_all(63)

class CombinationCalculatorTestSelect(unittest.TestCase):
    def test_select(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        return calc.count(4, 2)

    def test_select_2(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        return calc.count(5, 3)

    def test_select_3(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        return calc.count(6, 6)

    def test_select_4(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        return calc.count(6, 0)

    def test_select_5(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        return calc.count(6, 3)

class CombinationCalculatorTestSelectAll(unittest.TestCase):
    def test_select_all(self):
        calc = CombinationCalculator(["A"])
        return calc.select_all()

    def test_select_all_2(self):
        calc = CombinationCalculator(["A", "B"])
        return calc.select_all()

    def test_select_all_3(self):
        calc = CombinationCalculator(["A", "B", "C"])
        return calc.select_all()

    def test_select_all_4(self):
        calc = CombinationCalculator([])
        return calc.select_all()

    def test_select_all_5(self):
        calc = CombinationCalculator(["B"])
        return calc.select_all()


class CombinationCalculatorTestSelect2(unittest.TestCase):
    def test_select2(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        result = []
        calc._select(0, [None] * 2, 0, result)
        return result

    def test_select2_2(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        result = []
        calc._select(0, [None] * 3, 0, result)
        return result

    def test_select2_3(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        result = []
        calc._select(0, [None] * 1, 0, result)
        return result

    def test_select2_4(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        result = []
        calc._select(0, [None] * 0, 0, result)
        return result

    def test_select2_5(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        result = []
        calc._select(0, [None] * 4, 0, result)
        return result

class CombinationCalculatorTestMain(unittest.TestCase):
    def test_main(self):
        calc = CombinationCalculator(["A", "B", "C", "D"])
        res1 = calc.count(4, 2)
        res2 = calc.count_all(4)
        res3 = calc.select(2)
        res4 = calc.select_all()
        result = []
        calc._select(0, [None] * 2, 0, result)
        return [res1, res2, res3, res4, result]


def obtain_output():
    classes = ['CombinationCalculatorTestCount',
               'CombinationCalculatorTestCountAll',
               'CombinationCalculatorTestSelect',
               'CombinationCalculatorTestSelectAll',
               'CombinationCalculatorTestSelect2',
               'CombinationCalculatorTestMain']
    output = []
    output_idx = 0
    for each_class in classes:
        this_class = eval(f"{each_class}()")
        test_functions = [name for name, obj in inspect.getmembers(eval(each_class))
                  if inspect.isfunction(obj)]
        for each_func in test_functions:
            function_output = None
            try:
                function_output = eval(f"this_class.{each_func}()")
                output.append([output_idx,function_output])
            except Exception:
                output.append([output_idx, "Exception"])
            output_idx += 1
    return output